;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <spi.h>
;#include <stdio.h>
;#include <delay.h>
;#include <stdint.h>
;
;#define RC522_CS_PORT PORTB
;#define RC522_CS_DDR DDRB
;#define RC522_CS_PIN PORTB4
;
;#define CommandReg       0x01
;#define ComIEnReg        0x02
;#define DivIEnReg        0x03
;#define ComIrqReg        0x04
;#define DivIrqReg        0x05
;#define ErrorReg         0x06
;#define Status1Reg       0x07
;#define Status2Reg       0x08
;#define FIFODataReg      0x09
;#define FIFOLevelReg     0x0A
;#define ControlReg       0x0C
;#define BitFramingReg    0x0D
;#define ModeReg          0x11
;#define TxControlReg     0x14
;#define TxASKReg         0x15
;#define TModeReg         0x2A
;#define TPrescalerReg    0x2B
;#define TReloadRegH      0x2C
;#define TReloadRegL      0x2D
;#define AutoTestReg      0x36
;#define VersionReg       0x37
;
;#define PCD_Idle         0x00
;#define PCD_Mem          0x01
;#define PCD_CalcCRC      0x03
;#define PCD_Transceive   0x0C
;#define PCD_SoftReset    0x0F
;
;#define PICC_REQIDL      0x26
;#define PICC_ANTICOLL_CL1 0x93
;#define PICC_ANTICOLL_CL2 0x95
;
;static void cs_low(void){  RC522_CS_PORT &= ~(1<<RC522_CS_PIN); }
; 0000 002C static void cs_low(void){  PORTB &= ~(1<<4       ); }

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;static void cs_high(void){ RC522_CS_PORT |=  (1<<RC522_CS_PIN); }
; 0000 002D static void cs_high(void){ PORTB |=  (1<<4       ); }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;static void rc522_write(uint8_t reg, uint8_t val){
; 0000 002F static void rc522_write(uint8_t reg, uint8_t val){
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030     cs_low();
;PCODE: $0000001B VOL: 0
;	reg -> Y+1
;	val -> Y+0
;PCODE: $0000001C VOL: 0
; 0000 0031     spi( (reg<<1) & 0x7E );
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0032     spi( val );
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0033     cs_high();
;PCODE: $00000024 VOL: 0
; 0000 0034 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;static uint8_t rc522_read(uint8_t reg){
; 0000 0035 static uint8_t rc522_read(uint8_t reg){
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0036     uint8_t v;
; 0000 0037     cs_low();
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;	reg -> Y+1
;	v -> R17
;PCODE: $0000002C VOL: 0
; 0000 0038     spi( ((reg<<1)&0x7E) | 0x80 );
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0039     v = spi(0x00);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003A     cs_high();
;PCODE: $00000036 VOL: 0
; 0000 003B     return v;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003C }
;PCODE: $0000003C VOL: 0
;static void set_bit_mask(uint8_t reg, uint8_t mask){ rc522_write(reg, rc522_read(reg)|mask); }
; 0000 003D static void set_bit_mask(uint8_t reg, uint8_t mask){ rc522_write(reg, rc522_read(reg)|mask); }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;	reg -> Y+1
;	mask -> Y+0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;static void clr_bit_mask(uint8_t reg, uint8_t mask){ rc522_write(reg, rc522_read(reg)&(~mask)); }
; 0000 003E static void clr_bit_mask(uint8_t reg, uint8_t mask){ rc522_write(reg, rc522_read(reg)&(~mask)); }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;	reg -> Y+1
;	mask -> Y+0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;static void rc522_soft_reset(void){ rc522_write(CommandReg,PCD_SoftReset); delay_ms(50); }
; 0000 0040 static void rc522_soft_reset(void){ rc522_write(0x01,0x0F); delay_ms(50); }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;static void rc522_antenna_on(void){
; 0000 0042 static void rc522_antenna_on(void){
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0043     if(!(rc522_read(TxControlReg)&0x03)) set_bit_mask(TxControlReg,0x03);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0044 }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;
;static void rc522_init(void){
; 0000 0046 static void rc522_init(void){
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0047     rc522_soft_reset();
;PCODE: $00000075 VOL: 0
; 0000 0048     rc522_write(TModeReg,      0x8D);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0049     rc522_write(TPrescalerReg, 0x3E);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004A     rc522_write(TReloadRegL,   30);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 004B     rc522_write(TReloadRegH,   0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 004C     rc522_write(TxASKReg,      0x40);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 004D     rc522_write(ModeReg,       0x3D);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 004E     rc522_antenna_on();
;PCODE: $0000008E VOL: 0
; 0000 004F }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;
;static uint8_t rc522_selftest(uint8_t* ver_out){
; 0000 0051 static uint8_t rc522_selftest(uint8_t* ver_out){
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0052     static const uint8_t expect_v10[64]={
; 0000 0053         0x00,0xC6,0x37,0xD5,0x32,0xB7,0x57,0x5C,0xC2,0xD8,0x7C,0x4D,0xD9,0x70,0xC7,0x73,
; 0000 0054         0x10,0xE6,0xD2,0xAA,0x5E,0xA1,0x3E,0x5A,0x14,0xAF,0x30,0x61,0xC9,0x70,0xDB,0x2E,
; 0000 0055         0x64,0x22,0x72,0xB5,0xBD,0x65,0xF4,0xEC,0x22,0xBC,0xD3,0x72,0x35,0xCD,0xAA,0x41,
; 0000 0056         0x1F,0xA7,0xF3,0x53,0x14,0xDE,0x7E,0x02,0xD9,0x0F,0xB5,0x5E,0x25,0x1D,0x29,0x79
; 0000 0057     };

	.DSEG

	.CSEG
; 0000 0058     static const uint8_t expect_v20[64]={
; 0000 0059         0x00,0xEB,0x66,0xBA,0x57,0xBF,0x23,0x95,0xD0,0xE3,0x0D,0x3D,0x27,0x89,0x5C,0xDE,
; 0000 005A         0x9D,0x3B,0xA7,0x00,0x21,0x5B,0x89,0x82,0x51,0x3A,0xEB,0x02,0x0C,0xA5,0x00,0x49,
; 0000 005B         0x7C,0x84,0x4D,0xB3,0xCC,0xD2,0x1B,0x81,0x5D,0x48,0x76,0xD5,0x71,0x61,0x21,0xA9,
; 0000 005C         0x86,0x96,0x83,0x38,0xCF,0x9D,0x5B,0x6D,0xDC,0x15,0xBA,0x3E,0x7D,0x95,0x3B,0x2F
; 0000 005D     };

	.DSEG

	.CSEG
; 0000 005E     uint8_t ver=rc522_read(VersionReg), i, fl, buf[64];
; 0000 005F     rc522_soft_reset();
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;	*ver_out -> Y+68
;	ver -> R17
;	i -> R16
;	fl -> R19
;	buf -> Y+4
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0060     rc522_write(FIFOLevelReg,0x80);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0061     for(i=0;i<25;i++) rc522_write(FIFODataReg,0x00);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0062 rc522_write(0x01,0x01);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0063     rc522_write(AutoTestReg,0x09);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0064     rc522_write(FIFODataReg,0x00);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0065     rc522_write(CommandReg,PCD_CalcCRC);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0066     for(i=0;i<200;i++){ fl=rc522_read(FIFOLevelReg); if(fl==64) break; delay_ms(1); }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0067     if(fl!=64){ *ver_out=ver; return 0; }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0068     for(i=0;i<64;i++) buf[i]=rc522_read(FIFODataReg);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0069 rc522_write(0x36,0x00);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 006A     rc522_soft_reset();
;PCODE: $000000FE VOL: 0
; 0000 006B     *ver_out=ver;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 006C     if(ver==0x91){ for(i=0;i<64;i++) if(buf[i]!=expect_v10[i]) return 0; return 1; }
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 006D     if(ver==0x92){ for(i=0;i<64;i++) if(buf[i]!=expect_v20[i]) return 0; return 1; }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 006E     return 0;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 006F }
;PCODE: $00000151 VOL: 0
;
;static uint8_t rc522_transceive(uint8_t *send, uint8_t sendLen, uint8_t *back, uint8_t *backBits){
; 0000 0071 static uint8_t rc522_transceive(uint8_t *send, uint8_t sendLen, uint8_t *back, uint8_t *backBits){
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0072     uint8_t i, n, lastBits;
; 0000 0073     rc522_write(ComIEnReg, 0x77 | 0x80);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;	*send -> Y+9
;	sendLen -> Y+8
;	*back -> Y+6
;	*backBits -> Y+4
;	i -> R17
;	n -> R16
;	lastBits -> R19
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0074     clr_bit_mask(ComIrqReg, 0x80);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0075     set_bit_mask(FIFOLevelReg, 0x80);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0076     rc522_write(CommandReg, PCD_Idle);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0077     for(i=0;i<sendLen;i++) rc522_write(FIFODataReg, send[i]);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0078 rc522_write(0x01, 0x0C);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0079     set_bit_mask(BitFramingReg, 0x80); // StartSend
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 007A 
; 0000 007B     i=200;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 007C     do{
;PCODE: $00000184 VOL: 0
; 0000 007D         n=rc522_read(ComIrqReg);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 007E         i--;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 007F     }while(i && !(n&0x30)); // RxIRq or IdleIRq
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0080 
; 0000 0081     clr_bit_mask(BitFramingReg,0x80);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0082     if(!i) return 0;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0083     if(rc522_read(ErrorReg)&0x1B) return 0;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0084 
; 0000 0085     n = rc522_read(FIFOLevelReg);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0086     lastBits = rc522_read(ControlReg) & 0x07;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0087     if(lastBits) *backBits = (n-1)*8 + lastBits;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0088     else         *backBits = n*8;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0089 
; 0000 008A     for(i=0;i<n;i++) back[i]=rc522_read(FIFODataReg);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 008B return 1;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 008C }
;PCODE: $000001DB VOL: 0
;
;static uint8_t rc522_request(uint8_t reqMode, uint8_t *ATQA){
; 0000 008E static uint8_t rc522_request(uint8_t reqMode, uint8_t *ATQA){
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 008F     uint8_t cmd= reqMode, back[2], backBits=0;
; 0000 0090     rc522_write(BitFramingReg,0x07);             // 7-bit for REQA
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;	reqMode -> Y+6
;	*ATQA -> Y+4
;	cmd -> R17
;	back -> Y+2
;	backBits -> R16
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0091     if(!rc522_transceive(&cmd,1,back,&backBits)) return 0;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0092     rc522_write(BitFramingReg,0x00);             // <<< ?????? ?? 8-bit
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0093     if(backBits!=16) return 0;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0094     ATQA[0]=back[0]; ATQA[1]=back[1];
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0095     return 1;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0096 }
;PCODE: $0000021C VOL: 0
;
;static uint8_t rc522_anticoll_level(uint8_t level_cmd, uint8_t *out5){
; 0000 0098 static uint8_t rc522_anticoll_level(uint8_t level_cmd, uint8_t *out5){
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0099     uint8_t cmd[2];
; 0000 009A     uint8_t back[10]; uint8_t backBits=0, i;
; 0000 009B     cmd[0] = level_cmd;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;	level_cmd -> Y+16
;	*out5 -> Y+14
;	cmd -> Y+12
;	back -> Y+2
;	backBits -> R17
;	i -> R16
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 009C     cmd[1] = 0x20;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 009D     rc522_write(BitFramingReg,0x00);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 009E     if(!rc522_transceive(cmd,2,back,&backBits)) return 0;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 009F     if(backBits!=40) return 0;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 00A0     for(i=0;i<5;i++) out5[i]=back[i];
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 00A1 return 1;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 00A2 }
;PCODE: $0000026D VOL: 0
;
;static uint8_t rc522_get_uid(uint8_t *uid){
; 0000 00A4 static uint8_t rc522_get_uid(uint8_t *uid){
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 00A5     uint8_t block[5], i, bcc, len=0;
; 0000 00A6 
; 0000 00A7 
; 0000 00A8     if(!rc522_anticoll_level(PICC_ANTICOLL_CL1, block)) return 0;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;	*uid -> Y+9
;	block -> Y+4
;	i -> R17
;	bcc -> R16
;	len -> R19
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 00A9 
; 0000 00AA     if(block[0]==0x88){
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 00AB         uid[0]=block[1]; uid[1]=block[2]; uid[2]=block[3];
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 00AC         if(!rc522_anticoll_level(PICC_ANTICOLL_CL2, block)) return 0;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 00AD         bcc = block[0]^block[1]^block[2]^block[3];
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 00AE         if(bcc!=block[4]) return 0;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 00AF         uid[3]=block[0]; uid[4]=block[1]; uid[5]=block[2]; uid[6]=block[3];
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 00B0         len=7;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 00B1     }else{
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 00B2         bcc = block[0]^block[1]^block[2]^block[3];
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 00B3         if(bcc!=block[4]) return 0;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 00B4         for(i=0;i<4;i++) uid[i]=block[i];
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 00B5 len=4;
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 00B6     }
;PCODE: $000002E3 VOL: 0
; 0000 00B7     return len;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 00B8 }
;PCODE: $000002E8 VOL: 0
;
;
;void main(void)
; 0000 00BC {
;PCODE: $000002E9 VOL: 0
; 0000 00BD char line[21];
; 0000 00BE uint8_t ver=0, ok=0;
; 0000 00BF 
; 0000 00C0 // Port A initialization
; 0000 00C1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C2 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000002EA VOL: 0
;	line -> Y+0
;	ver -> R17
;	ok -> R16
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 00C3 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C4 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 00C5 
; 0000 00C6 // Port B initialization
; 0000 00C7 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C8 DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 00C9 // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00CA PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 00CB 
; 0000 00CC // Port C initialization
; 0000 00CD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00CE DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 00CF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D0 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 00D1 
; 0000 00D2 // Port D initialization
; 0000 00D3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D4 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 00D5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D6 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 00D7 
; 0000 00D8 // Timer/Counter 0 initialization
; 0000 00D9 // Clock source: System Clock
; 0000 00DA // Clock value: Timer 0 Stopped
; 0000 00DB // Mode: Normal top=0xFF
; 0000 00DC // OC0 output: Disconnected
; 0000 00DD TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 00DE TCNT0=0x00;
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 00DF OCR0=0x00;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 00E0 
; 0000 00E1 // Timer/Counter 1 initialization
; 0000 00E2 // Clock source: System Clock
; 0000 00E3 // Clock value: Timer1 Stopped
; 0000 00E4 // Mode: Normal top=0xFFFF
; 0000 00E5 // OC1A output: Disconnected
; 0000 00E6 // OC1B output: Disconnected
; 0000 00E7 // Noise Canceler: Off
; 0000 00E8 // Input Capture on Falling Edge
; 0000 00E9 // Timer1 Overflow Interrupt: Off
; 0000 00EA // Input Capture Interrupt: Off
; 0000 00EB // Compare A Match Interrupt: Off
; 0000 00EC // Compare B Match Interrupt: Off
; 0000 00ED TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 00EE TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 00EF TCNT1H=0x00;
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 00F0 TCNT1L=0x00;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 00F1 ICR1H=0x00;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 00F2 ICR1L=0x00;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 00F3 OCR1AH=0x00;
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 00F4 OCR1AL=0x00;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 00F5 OCR1BH=0x00;
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 00F6 OCR1BL=0x00;
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 00F7 
; 0000 00F8 // Timer/Counter 2 initialization
; 0000 00F9 // Clock source: System Clock
; 0000 00FA // Clock value: Timer2 Stopped
; 0000 00FB // Mode: Normal top=0xFF
; 0000 00FC // OC2 output: Disconnected
; 0000 00FD ASSR=0<<AS2;
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 00FE TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 00FF TCNT2=0x00;
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0100 OCR2=0x00;
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 0101 
; 0000 0102 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0103 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 0104 
; 0000 0105 // External Interrupt(s) initialization
; 0000 0106 // INT0: Off
; 0000 0107 // INT1: Off
; 0000 0108 // INT2: Off
; 0000 0109 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 010A MCUCSR=(0<<ISC2);
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 010B 
; 0000 010C // USART initialization
; 0000 010D // USART disabled
; 0000 010E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 010F 
; 0000 0110 // Analog Comparator initialization
; 0000 0111 // Analog Comparator: Off
; 0000 0112 // The Analog Comparator's positive input is
; 0000 0113 // connected to the AIN0 pin
; 0000 0114 // The Analog Comparator's negative input is
; 0000 0115 // connected to the AIN1 pin
; 0000 0116 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0117 SFIOR=(0<<ACME);
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 0118 
; 0000 0119 // ADC initialization
; 0000 011A // ADC disabled
; 0000 011B ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 011C 
; 0000 011D // SPI initialization
; 0000 011E // SPI Type: Master
; 0000 011F // SPI Clock Rate: 125.000 kHz
; 0000 0120 // SPI Clock Phase: Cycle Start
; 0000 0121 // SPI Clock Polarity: Low
; 0000 0122 // SPI Data Order: MSB First
; 0000 0123 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (0<<SPR0);
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 0124 SPSR=(0<<SPI2X);
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0125 
; 0000 0126 // TWI initialization
; 0000 0127 // TWI disabled
; 0000 0128 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 0129 
; 0000 012A // Alphanumeric LCD initialization
; 0000 012B // Connections are specified in the
; 0000 012C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 012D // RS - PORTC Bit 0
; 0000 012E // RD - PORTC Bit 1
; 0000 012F // EN - PORTC Bit 2
; 0000 0130 // D4 - PORTC Bit 4
; 0000 0131 // D5 - PORTC Bit 5
; 0000 0132 // D6 - PORTC Bit 6
; 0000 0133 // D7 - PORTC Bit 7
; 0000 0134 // Characters/line: 16
; 0000 0135 RC522_CS_DDR |= (1<<RC522_CS_PIN);
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 0136 RC522_CS_PORT |= (1<<RC522_CS_PIN);
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0137 
; 0000 0138 lcd_init(16);
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0139 lcd_clear();
;PCODE: $0000033B VOL: 0
; 0000 013A lcd_gotoxy(0,0);lcd_putsf("RC522 SelfTest");
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 013B lcd_gotoxy(0,1);lcd_putsf("Please wait...");
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 013C delay_ms(400);
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 013D 
; 0000 013E ok = rc522_selftest(&ver);
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 013F 
; 0000 0140 lcd_clear();
;PCODE: $00000351 VOL: 0
; 0000 0141 sprintf(line, "Ver:0x%02X", ver);
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0142 lcd_gotoxy(0,0);lcd_puts(line);
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 0143 if(!ok){lcd_gotoxy(0,1); lcd_putsf("SelfTest: FAIL"); while(1);}
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 0144 lcd_gotoxy(0,1);lcd_puts("SelfTest: PASS");
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 0145 delay_ms(600);
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 0146 
; 0000 0147 rc522_init();
;PCODE: $0000037A VOL: 0
; 0000 0148 
; 0000 0149 while (1)
;PCODE: $0000037B VOL: 0
; 0000 014A       {
; 0000 014B         uint8_t atqa[2], uid[10], uid_len=0;
; 0000 014C 
; 0000 014D         if(rc522_request(PICC_REQIDL, atqa)){
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;	line -> Y+13
;	atqa -> Y+11
;	uid -> Y+1
;	uid_len -> Y+0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 014E             uid_len = rc522_get_uid(uid);
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 014F             if(uid_len){
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 0150                 lcd_clear();
;PCODE: $0000038B VOL: 0
; 0000 0151                 lcd_gotoxy(0,0); lcd_putsf("Card detected!");
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 0152 
; 0000 0153                 if(uid_len==4){
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 0154                     sprintf(line,"UID:%02X%02X%02X%02X", uid[0],uid[1],uid[2],uid[3]);
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 0155                     lcd_gotoxy(0,1); lcd_puts(line);
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 0156                 }else{
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 0157                     sprintf(line,"UID:%02X%02X%02X%02X", uid[0],uid[1],uid[2],uid[3]);
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 0158                     lcd_gotoxy(0,1); lcd_puts(line);
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 0159                     delay_ms(1000);
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 015A                     lcd_clear();
;PCODE: $000003D0 VOL: 0
; 0000 015B                     lcd_gotoxy(0,0); lcd_putsf("UID cont.:");
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 015C                     sprintf(line,"%02X%02X%02X", uid[4],uid[5],uid[6]);
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 015D                     lcd_gotoxy(0,1); lcd_puts(line);
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 015E                 }
;PCODE: $000003F0 VOL: 0
; 0000 015F                 delay_ms(1200);
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 0160             }
; 0000 0161         }
;PCODE: $000003F3 VOL: 0
; 0000 0162         else {
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 0163             static uint8_t ui_init = 0;
; 0000 0164             static uint8_t spin = 0;
; 0000 0165             static const char spch[4] = {'|','/','-','\\'};

	.DSEG

	.CSEG
; 0000 0166             static uint16_t ms_acc = 0;
; 0000 0167 
; 0000 0168             if(!ui_init){
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 0169                 lcd_clear();
;PCODE: $000003F9 VOL: 0
; 0000 016A                 lcd_gotoxy(0,0); lcd_putsf("Searching card");
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 016B                 ui_init = 1;
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0000 016C             }
; 0000 016D 
; 0000 016E             lcd_gotoxy(15,0);
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 016F             lcd_putchar(spch[spin++ & 3]);
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 0170 
; 0000 0171             if(rc522_request(PICC_REQIDL, atqa)){
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 0172                 ui_init = 0;
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 0173                 continue;
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 0174             }
; 0000 0175 
; 0000 0176             delay_ms(150);
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 0177             ms_acc += 150;
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 0178             if(ms_acc >= 1500){
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0179                 lcd_gotoxy(0,1);
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 017A                 lcd_putsf("NO CARD       ");
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 017B                 ms_acc = 0;
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 017C             }
; 0000 017D         }
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 017E 
; 0000 017F         delay_ms(150);
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 0180 
; 0000 0181       }
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0182 }
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0

	.DSEG
_0x3E:
	.BYTE 0xF
