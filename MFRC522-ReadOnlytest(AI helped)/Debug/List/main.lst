
AVRASM ver. 2.1.30  I:\EmC-Proj\MFRC522-ReadOnlytest\Debug\List\main.asm Tue Sep 23 16:31:24 2025

I:\EmC-Proj\MFRC522-ReadOnlytest\Debug\List\main.asm(1088): warning: Register r5 already defined by the .DEF directive
I:\EmC-Proj\MFRC522-ReadOnlytest\Debug\List\main.asm(1089): warning: Register r4 already defined by the .DEF directive
I:\EmC-Proj\MFRC522-ReadOnlytest\Debug\List\main.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00cc 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _S_C1K_G000:
00002a 494d
00002b 4146
00002c 4552
00002d 4320      	.DB  0x4D,0x49,0x46,0x41,0x52,0x45,0x20,0x43
00002e 616c
00002f 7373
000030 6369
000031 3120      	.DB  0x6C,0x61,0x73,0x73,0x69,0x63,0x20,0x31
000032 004b      	.DB  0x4B,0x0
                 _S_C4K_G000:
000033 494d
000034 4146
000035 4552
000036 4320      	.DB  0x4D,0x49,0x46,0x41,0x52,0x45,0x20,0x43
000037 616c
000038 7373
000039 6369
00003a 3420      	.DB  0x6C,0x61,0x73,0x73,0x69,0x63,0x20,0x34
00003b 004b      	.DB  0x4B,0x0
                 _S_UL_G000:
00003c 6c55
00003d 7274
00003e 6c61
00003f 6769      	.DB  0x55,0x6C,0x74,0x72,0x61,0x6C,0x69,0x67
000040 7468
000041 4e2f
000042 4154
000043 0047      	.DB  0x68,0x74,0x2F,0x4E,0x54,0x41,0x47,0x0
                 _S_UNK_G000:
000044 6e55
000045 6e6b
000046 776f
000047 2f6e      	.DB  0x55,0x6E,0x6B,0x6E,0x6F,0x77,0x6E,0x2F
000048 746f
000049 6568
00004a 0072      	.DB  0x6F,0x74,0x68,0x65,0x72,0x0
                 _tbl10_G102:
00004b 2710
00004c 03e8
00004d 0064
00004e 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004f 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000050 1000
000051 0100
000052 0010
000053 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000054 ffff
000055 ffff
000056 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 _0x4:
000057 ffff
000058 ffff
000059 ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 _0x0:
00005a 4352
00005b 3235
00005c 2032
00005d 6552      	.DB  0x52,0x43,0x35,0x32,0x32,0x20,0x52,0x65
00005e 6461
00005f 0079
000060 6353
000061 6e61      	.DB  0x61,0x64,0x79,0x0,0x53,0x63,0x61,0x6E
000062 6120
000063 6320
000064 7261
000065 2e64      	.DB  0x20,0x61,0x20,0x63,0x61,0x72,0x64,0x2E
000066 2e2e
000067 5300
000068 6c65
000069 6365      	.DB  0x2E,0x2E,0x0,0x53,0x65,0x6C,0x65,0x63
00006a 2074
00006b 6166
00006c 6c69
00006d 6465      	.DB  0x74,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
00006e 5300
00006f 4b41
000070 253a
000071 3230      	.DB  0x0,0x53,0x41,0x4B,0x3A,0x25,0x30,0x32
000072 0058
000073 4955
000074 3a44
000075 3025      	.DB  0x58,0x0,0x55,0x49,0x44,0x3A,0x25,0x30
000076 5832
000077 3025
000078 5832
000079 3025      	.DB  0x32,0x58,0x25,0x30,0x32,0x58,0x25,0x30
00007a 5832
00007b 3025
00007c 5832
00007d 4100      	.DB  0x32,0x58,0x25,0x30,0x32,0x58,0x0,0x41
00007e 7475
00007f 2d68
000080 6552
000081 6461      	.DB  0x75,0x74,0x68,0x2D,0x52,0x65,0x61,0x64
000082 4620
000083 4941
000084 004c
000085 6552      	.DB  0x20,0x46,0x41,0x49,0x4C,0x0,0x52,0x65
000086 6461
000087 4520
000088 7272
000089 726f      	.DB  0x61,0x64,0x20,0x45,0x72,0x72,0x6F,0x72
00008a 4200
00008b 3a34
00008c 5200
00008d 2d65      	.DB  0x0,0x42,0x34,0x3A,0x0,0x52,0x65,0x2D
00008e 6573
00008f 656c
000090 7463
000091 4620      	.DB  0x73,0x65,0x6C,0x65,0x63,0x74,0x20,0x46
000092 6961
000093 006c
000094 7541
000095 6874      	.DB  0x61,0x69,0x6C,0x0,0x41,0x75,0x74,0x68
000096 5420
000097 6172
000098 6c69
000099 7265      	.DB  0x20,0x54,0x72,0x61,0x69,0x6C,0x65,0x72
00009a 4620
00009b 6961
00009c 006c
00009d 7254      	.DB  0x20,0x46,0x61,0x69,0x6C,0x0,0x54,0x72
00009e 6961
00009f 656c
0000a0 2072
0000a1 6552      	.DB  0x61,0x69,0x6C,0x65,0x72,0x20,0x52,0x65
0000a2 6461
0000a3 7245
0000a4 0072
0000a5 4f52      	.DB  0x61,0x64,0x45,0x72,0x72,0x0,0x52,0x4F
0000a6 003a
0000a7 4559
0000a8 2053
0000a9 4e00      	.DB  0x3A,0x0,0x59,0x45,0x53,0x20,0x0,0x4E
0000aa 204f
0000ab 0020
0000ac 3a43
0000ad 6425      	.DB  0x4F,0x20,0x20,0x0,0x43,0x3A,0x25,0x64
0000ae 6425
0000af 6425
0000b0 4100
0000b1 4343      	.DB  0x25,0x64,0x25,0x64,0x0,0x41,0x43,0x43
0000b2 253a
0000b3 3230
0000b4 2558
0000b5 3230      	.DB  0x3A,0x25,0x30,0x32,0x58,0x25,0x30,0x32
0000b6 2558
0000b7 3230
0000b8 0058
0000b9 4f52      	.DB  0x58,0x25,0x30,0x32,0x58,0x0,0x52,0x4F
0000ba 4e3a
0000bb 412f
0000bc 2820
0000bd 7954      	.DB  0x3A,0x4E,0x2F,0x41,0x20,0x28,0x54,0x79
0000be 6570
0000bf 2932
I:\EmC-Proj\MFRC522-ReadOnlytest\Debug\List\main.asm(1171): warning: .cseg .db misalignment - padding zero byte
0000c0 0000      	.DB  0x70,0x65,0x32,0x29,0x0
                 _0x2000003:
0000c1 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000c2 0006      	.DW  0x06
0000c3 0260      	.DW  _DEF_KEY_A_G000
0000c4 00a8      	.DW  _0x3*2
                 
0000c5 0006      	.DW  0x06
0000c6 0266      	.DW  _DEF_KEY_B_G000
0000c7 00ae      	.DW  _0x4*2
                 
0000c8 0002      	.DW  0x02
0000c9 026c      	.DW  __base_y_G100
0000ca 0182      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000cb 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000cc 94f8      	CLI
0000cd 27ee      	CLR  R30
0000ce bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000cf e0f1      	LDI  R31,1
0000d0 bffb      	OUT  GICR,R31
0000d1 bfeb      	OUT  GICR,R30
0000d2 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000d3 e08d      	LDI  R24,(14-2)+1
0000d4 e0a2      	LDI  R26,2
0000d5 27bb      	CLR  R27
                 __CLEAR_REG:
0000d6 93ed      	ST   X+,R30
0000d7 958a      	DEC  R24
0000d8 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d9 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000da e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000db e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000dc 93ed      	ST   X+,R30
0000dd 9701      	SBIW R24,1
0000de f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000df e8e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000e0 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e1 9185      	LPM  R24,Z+
0000e2 9195      	LPM  R25,Z+
0000e3 9700      	SBIW R24,0
0000e4 f061      	BREQ __GLOBAL_INI_END
0000e5 91a5      	LPM  R26,Z+
0000e6 91b5      	LPM  R27,Z+
0000e7 9005      	LPM  R0,Z+
0000e8 9015      	LPM  R1,Z+
0000e9 01bf      	MOVW R22,R30
0000ea 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000eb 9005      	LPM  R0,Z+
0000ec 920d      	ST   X+,R0
0000ed 9701      	SBIW R24,1
0000ee f7e1      	BRNE __GLOBAL_INI_LOOP
0000ef 01fb      	MOVW R30,R22
0000f0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f1 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f2 bfed      	OUT  SPL,R30
0000f3 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f5 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f6 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f7 940c 048c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <spi.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <stdint.h>
                 ;
                 ;/* --- Pins --- */
                 ;#define RC522_CS_PORT PORTB
                 ;#define RC522_CS_DDR  DDRB
                 ;#define RC522_CS_PIN  PORTB4
                 ;
                 ;/* --- RC522 regs --- */
                 ;#define CommandReg       0x01
                 ;#define ComIEnReg        0x02
                 ;#define ComIrqReg        0x04
                 ;#define DivIrqReg        0x05
                 ;#define ErrorReg         0x06
                 ;#define Status1Reg       0x07
                 ;#define Status2Reg       0x08
                 ;#define FIFODataReg      0x09
                 ;#define FIFOLevelReg     0x0A
                 ;#define ControlReg       0x0C
                 ;#define BitFramingReg    0x0D
                 ;#define ModeReg          0x11
                 ;#define TxControlReg     0x14
                 ;#define TxASKReg         0x15
                 ;#define CollReg          0x0E
                 ;#define CRCResultRegH    0x21
                 ;#define CRCResultRegL    0x22
                 ;#define TModeReg         0x2A
                 ;#define TPrescalerReg    0x2B
                 ;#define TReloadRegH      0x2C
                 ;#define TReloadRegL      0x2D
                 ;
                 ;/* --- RC522 cmds --- */
                 ;#define PCD_Idle         0x00
                 ;#define PCD_CalcCRC      0x03
                 ;#define PCD_Transceive   0x0C
                 ;#define PCD_SoftReset    0x0F
                 ;#define PCD_MFAuthent    0x0E
                 ;
                 ;/* --- ISO14443A/PICC --- */
                 ;#define PICC_REQIDL        0x26
                 ;#define PICC_ANTICOLL_CL1  0x93
                 ;#define PICC_ANTICOLL_CL2  0x95
                 ;#define PICC_SELECT_CL1    0x93
                 ;#define PICC_SELECT_CL2    0x95
                 ;#define PICC_HALT          0x50
                 ;
                 ;/* --- MIFARE Classic --- */
                 ;#define MF_AUTH_KEY_A    0x60
                 ;#define MF_AUTH_KEY_B    0x61
                 ;#define MF_READ          0x30
                 ;
                 ;/* --- Strings in flash --- */
                 ;static flash char S_C1K[]="MIFARE Classic 1K";
                 ;static flash char S_C4K[]="MIFARE Classic 4K";
                 ;static flash char S_UL []="Ultralight/NTAG";
                 ;static flash char S_UNK[]="Unknown/other";
                 ;
                 ;/* --- Default Keys --- */
                 ;static uint8_t DEF_KEY_A[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
                 
                 	.DSEG
                 ;static uint8_t DEF_KEY_B[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
                 ;
                 ;/* --- CS helpers --- */
                 ;static void cs_low(void){  RC522_CS_PORT &= ~(1<<RC522_CS_PIN); }
                 ; 0000 0043 static void cs_low(void){  PORTB &= ~(1<<4       ); }
                 
                 	.CSEG
                 _cs_low_G000:
                 ; .FSTART _cs_low_G000
0000f9 98c4      	CBI  0x18,4
0000fa 9508      	RET
                 ; .FEND
                 ;static void cs_high(void){ RC522_CS_PORT |=  (1<<RC522_CS_PIN); }
                 ; 0000 0044 static void cs_high(void){ PORTB |=  (1<<4       ); }
                 _cs_high_G000:
                 ; .FSTART _cs_high_G000
0000fb 9ac4      	SBI  0x18,4
0000fc 9508      	RET
                 ; .FEND
                 ;
                 ;/* --- Low-level R/W --- */
                 ;static void rc522_write(uint8_t reg, uint8_t val){
                 ; 0000 0047 static void rc522_write(uint8_t reg, uint8_t val){
                 _rc522_write_G000:
                 ; .FSTART _rc522_write_G000
                 ; 0000 0048     cs_low(); spi((reg<<1)&0x7E); spi(val); cs_high();
0000fd 93aa      	ST   -Y,R26
                 ;	reg -> Y+1
                 ;	val -> Y+0
0000fe dffa      	RCALL _cs_low_G000
0000ff 81e9      	LDD  R30,Y+1
000100 0fee      	LSL  R30
000101 77ee      	ANDI R30,LOW(0x7E)
000102 2fae      	MOV  R26,R30
000103 940e 06ec 	CALL _spi
000105 81a8      	LD   R26,Y
000106 940e 06ec 	CALL _spi
000108 dff2      	RCALL _cs_high_G000
                 ; 0000 0049 }
000109 940c 0681 	JMP  _0x20A0004
                 ; .FEND
                 ;static uint8_t rc522_read(uint8_t reg){
                 ; 0000 004A static uint8_t rc522_read(uint8_t reg){
                 _rc522_read_G000:
                 ; .FSTART _rc522_read_G000
                 ; 0000 004B     uint8_t v;
                 ; 0000 004C     cs_low(); spi(((reg<<1)&0x7E)|0x80); v=spi(0x00); cs_high();
00010b 93aa      	ST   -Y,R26
00010c 931a      	ST   -Y,R17
                 ;	reg -> Y+1
                 ;	v -> R17
00010d dfeb      	RCALL _cs_low_G000
00010e 81e9      	LDD  R30,Y+1
00010f 0fee      	LSL  R30
000110 77ee      	ANDI R30,LOW(0x7E)
000111 68e0      	ORI  R30,0x80
000112 2fae      	MOV  R26,R30
000113 940e 06ec 	CALL _spi
000115 e0a0      	LDI  R26,LOW(0)
000116 940e 06ec 	CALL _spi
000118 2f1e      	MOV  R17,R30
000119 dfe1      	RCALL _cs_high_G000
                 ; 0000 004D     return v;
00011a 2fe1      	MOV  R30,R17
00011b 8118      	LDD  R17,Y+0
00011c 940c 0681 	JMP  _0x20A0004
                 ; 0000 004E }
                 ; .FEND
                 ;static void set_bit_mask(uint8_t reg, uint8_t mask){ rc522_write(reg, rc522_read(reg)|mask); }
                 ; 0000 004F static void set_bit_mask(uint8_t reg, uint8_t mask){ rc522_write(reg, rc522_read(reg)|mask); }
                 _set_bit_mask_G000:
                 ; .FSTART _set_bit_mask_G000
00011e 940e 08b5 	CALL SUBOPT_0x0
                 ;	reg -> Y+1
                 ;	mask -> Y+0
000120 81a9      	LDD  R26,Y+1
000121 2bea      	OR   R30,R26
000122 2fae      	MOV  R26,R30
000123 dfd9      	RCALL _rc522_write_G000
000124 940c 0681 	JMP  _0x20A0004
                 ; .FEND
                 ;static void clr_bit_mask(uint8_t reg, uint8_t mask){ rc522_write(reg, rc522_read(reg)&(~mask)); }
                 ; 0000 0050 static void clr_bit_mask(uint8_t reg, uint8_t mask){ rc522_write(reg, rc522_read(reg)&(~mask)); }
                 _clr_bit_mask_G000:
                 ; .FSTART _clr_bit_mask_G000
000126 940e 08b5 	CALL SUBOPT_0x0
                 ;	reg -> Y+1
                 ;	mask -> Y+0
000128 2fae      	MOV  R26,R30
000129 81e9      	LDD  R30,Y+1
00012a 95e0      	COM  R30
00012b 23ea      	AND  R30,R26
00012c 2fae      	MOV  R26,R30
00012d dfcf      	RCALL _rc522_write_G000
00012e 940c 0681 	JMP  _0x20A0004
                 ; .FEND
                 ;
                 ;/* --- Init --- */
                 ;static void rc522_soft_reset(void){ rc522_write(CommandReg,PCD_SoftReset); delay_ms(50); }
                 ; 0000 0053 static void rc522_soft_reset(void){ rc522_write(0x01,0x0F); delay_ms(50); }
                 _rc522_soft_reset_G000:
                 ; .FSTART _rc522_soft_reset_G000
000130 e0e1      	LDI  R30,LOW(1)
000131 93ea      	ST   -Y,R30
000132 e0af      	LDI  R26,LOW(15)
000133 dfc9      	RCALL _rc522_write_G000
000134 e3a2      	LDI  R26,LOW(50)
000135 e0b0      	LDI  R27,0
000136 940e 0984 	CALL _delay_ms
000138 9508      	RET
                 ; .FEND
                 ;static void rc522_antenna_on(void){ if(!(rc522_read(TxControlReg)&0x03)) set_bit_mask(TxControlReg,0x03); }
                 ; 0000 0054 static void rc522_antenna_on(void){ if(!(rc522_read(0x14)&0x03)) set_bit_mask(0x14,0x03); }
                 _rc522_antenna_on_G000:
                 ; .FSTART _rc522_antenna_on_G000
000139 e1a4      	LDI  R26,LOW(20)
00013a dfd0      	RCALL _rc522_read_G000
00013b 70e3      	ANDI R30,LOW(0x3)
00013c f421      	BRNE _0x5
00013d e1e4      	LDI  R30,LOW(20)
00013e 93ea      	ST   -Y,R30
00013f e0a3      	LDI  R26,LOW(3)
000140 dfdd      	RCALL _set_bit_mask_G000
                 _0x5:
000141 9508      	RET
                 ; .FEND
                 ;static void rc522_init(void){
                 ; 0000 0055 static void rc522_init(void){
                 _rc522_init_G000:
                 ; .FSTART _rc522_init_G000
                 ; 0000 0056     rc522_soft_reset();
000142 dfed      	RCALL _rc522_soft_reset_G000
                 ; 0000 0057     rc522_write(TModeReg,      0x8D);
000143 e2ea      	LDI  R30,LOW(42)
000144 93ea      	ST   -Y,R30
000145 e8ad      	LDI  R26,LOW(141)
000146 dfb6      	RCALL _rc522_write_G000
                 ; 0000 0058     rc522_write(TPrescalerReg, 0x3E);
000147 e2eb      	LDI  R30,LOW(43)
000148 93ea      	ST   -Y,R30
000149 e3ae      	LDI  R26,LOW(62)
00014a dfb2      	RCALL _rc522_write_G000
                 ; 0000 0059     rc522_write(TReloadRegL,   30);
00014b e2ed      	LDI  R30,LOW(45)
00014c 93ea      	ST   -Y,R30
00014d e1ae      	LDI  R26,LOW(30)
00014e dfae      	RCALL _rc522_write_G000
                 ; 0000 005A     rc522_write(TReloadRegH,   0);
00014f e2ec      	LDI  R30,LOW(44)
000150 940e 08bb 	CALL SUBOPT_0x1
                 ; 0000 005B     rc522_write(TxASKReg,      0x40);
000152 e1e5      	LDI  R30,LOW(21)
000153 93ea      	ST   -Y,R30
000154 e4a0      	LDI  R26,LOW(64)
000155 dfa7      	RCALL _rc522_write_G000
                 ; 0000 005C     rc522_write(ModeReg,       0x3D);
000156 e1e1      	LDI  R30,LOW(17)
000157 93ea      	ST   -Y,R30
000158 e3ad      	LDI  R26,LOW(61)
000159 dfa3      	RCALL _rc522_write_G000
                 ; 0000 005D     rc522_antenna_on();
00015a dfde      	RCALL _rc522_antenna_on_G000
                 ; 0000 005E }
00015b 9508      	RET
                 ; .FEND
                 ;
                 ;/* --- CRC_A --- */
                 ;static void rc522_calc_crc(uint8_t *data, uint8_t len, uint8_t *crc2){
                 ; 0000 0061 static void rc522_calc_crc(uint8_t *data, uint8_t len, uint8_t *crc2){
                 _rc522_calc_crc_G000:
                 ; .FSTART _rc522_calc_crc_G000
                 ; 0000 0062     uint8_t i;
                 ; 0000 0063     rc522_write(CommandReg, PCD_Idle);
00015c 940e 08bf 	CALL SUBOPT_0x2
                 ;	*data -> Y+4
                 ;	len -> Y+3
                 ;	*crc2 -> Y+1
                 ;	i -> R17
                 ; 0000 0064     set_bit_mask(FIFOLevelReg, 0x80);
00015e 940e 08c4 	CALL SUBOPT_0x3
                 ; 0000 0065     for(i=0;i<len;i++) rc522_write(FIFODataReg, data[i]);
000160 e010      	LDI  R17,LOW(0)
                 _0x7:
000161 81eb      	LDD  R30,Y+3
000162 171e      	CP   R17,R30
000163 f440      	BRSH _0x8
000164 e0e9      	LDI  R30,LOW(9)
000165 93ea      	ST   -Y,R30
000166 81ad      	LDD  R26,Y+5
000167 81be      	LDD  R27,Y+5+1
000168 940e 08c9 	CALL SUBOPT_0x4
00016a 5f1f      	SUBI R17,-1
00016b cff5      	RJMP _0x7
                 _0x8:
                 ; 0000 0066 rc522_write(0x01, 0x03);
00016c e0e1      	LDI  R30,LOW(1)
00016d 93ea      	ST   -Y,R30
00016e e0a3      	LDI  R26,LOW(3)
00016f df8d      	RCALL _rc522_write_G000
                 ; 0000 0067     for(i=0;i<255;i++){
000170 e010      	LDI  R17,LOW(0)
                 _0xA:
000171 3f1f      	CPI  R17,255
000172 f430      	BRSH _0xB
                 ; 0000 0068         if(rc522_read(DivIrqReg) & 0x04) break;
000173 e0a5      	LDI  R26,LOW(5)
000174 df96      	RCALL _rc522_read_G000
000175 70e4      	ANDI R30,LOW(0x4)
000176 f411      	BRNE _0xB
                 ; 0000 0069     }
000177 5f1f      	SUBI R17,-1
000178 cff8      	RJMP _0xA
                 _0xB:
                 ; 0000 006A     crc2[0]=rc522_read(CRCResultRegL);
000179 e2a2      	LDI  R26,LOW(34)
00017a df90      	RCALL _rc522_read_G000
00017b 81a9      	LDD  R26,Y+1
00017c 81ba      	LDD  R27,Y+1+1
00017d 93ec      	ST   X,R30
                 ; 0000 006B     crc2[1]=rc522_read(CRCResultRegH);
00017e e2a1      	LDI  R26,LOW(33)
00017f df8b      	RCALL _rc522_read_G000
                +
000180 81a9     +LDD R26 , Y + 1
000181 81ba     +LDD R27 , Y + 1 + 1
000182 9611     +ADIW R26 , 1
000183 93ec     +ST X , R30
                 	__PUTB1SNS 1,1
                 ; 0000 006C }
000184 8118      	LDD  R17,Y+0
000185 9626      	ADIW R28,6
000186 9508      	RET
                 ; .FEND
                 ;
                 ;/* --- Transceive --- */
                 ;static uint8_t rc522_transceive(uint8_t *send, uint8_t sendLen, uint8_t *back, uint8_t *backBits){
                 ; 0000 006F static uint8_t rc522_transceive(uint8_t *send, uint8_t sendLen, uint8_t *back, uint8_t *backBits){
                 _rc522_transceive_G000:
                 ; .FSTART _rc522_transceive_G000
                 ; 0000 0070     uint8_t i, n, lastBits;
                 ; 0000 0071     rc522_write(ComIEnReg, 0x77 | 0x80);
000187 93ba      	ST   -Y,R27
000188 93aa      	ST   -Y,R26
000189 940e 09ad 	CALL __SAVELOCR4
                 ;	*send -> Y+9
                 ;	sendLen -> Y+8
                 ;	*back -> Y+6
                 ;	*backBits -> Y+4
                 ;	i -> R17
                 ;	n -> R16
                 ;	lastBits -> R19
00018b e0e2      	LDI  R30,LOW(2)
00018c 93ea      	ST   -Y,R30
00018d efa7      	LDI  R26,LOW(247)
00018e df6e      	RCALL _rc522_write_G000
                 ; 0000 0072     clr_bit_mask(ComIrqReg, 0x80);
00018f e0e4      	LDI  R30,LOW(4)
000190 93ea      	ST   -Y,R30
000191 e8a0      	LDI  R26,LOW(128)
000192 df93      	RCALL _clr_bit_mask_G000
                 ; 0000 0073     set_bit_mask(FIFOLevelReg, 0x80);
000193 940e 08c4 	CALL SUBOPT_0x3
                 ; 0000 0074     rc522_write(CommandReg, PCD_Idle);
000195 e0e1      	LDI  R30,LOW(1)
000196 940e 08bb 	CALL SUBOPT_0x1
                 ; 0000 0075     for(i=0;i<sendLen;i++) rc522_write(FIFODataReg, send[i]);
000198 e010      	LDI  R17,LOW(0)
                 _0xE:
000199 85e8      	LDD  R30,Y+8
00019a 171e      	CP   R17,R30
00019b f440      	BRSH _0xF
00019c e0e9      	LDI  R30,LOW(9)
00019d 93ea      	ST   -Y,R30
00019e 85aa      	LDD  R26,Y+10
00019f 85bb      	LDD  R27,Y+10+1
0001a0 940e 08c9 	CALL SUBOPT_0x4
0001a2 5f1f      	SUBI R17,-1
0001a3 cff5      	RJMP _0xE
                 _0xF:
                 ; 0000 0076 rc522_write(0x01, 0x0C);
0001a4 e0e1      	LDI  R30,LOW(1)
0001a5 93ea      	ST   -Y,R30
0001a6 e0ac      	LDI  R26,LOW(12)
0001a7 df55      	RCALL _rc522_write_G000
                 ; 0000 0077     set_bit_mask(BitFramingReg, 0x80);
0001a8 e0ed      	LDI  R30,LOW(13)
0001a9 93ea      	ST   -Y,R30
0001aa e8a0      	LDI  R26,LOW(128)
0001ab df72      	RCALL _set_bit_mask_G000
                 ; 0000 0078     i=200;
0001ac ec18      	LDI  R17,LOW(200)
                 ; 0000 0079     do{ n=rc522_read(ComIrqReg); }while(--i && !(n&0x30));
                 _0x11:
0001ad e0a4      	LDI  R26,LOW(4)
0001ae df5c      	RCALL _rc522_read_G000
0001af 2f0e      	MOV  R16,R30
0001b0 5011      	SUBI R17,LOW(1)
0001b1 f011      	BREQ _0x13
0001b2 73e0      	ANDI R30,LOW(0x30)
0001b3 f009      	BREQ _0x14
                 _0x13:
0001b4 c001      	RJMP _0x12
                 _0x14:
0001b5 cff7      	RJMP _0x11
                 _0x12:
                 ; 0000 007A     clr_bit_mask(BitFramingReg,0x80);
0001b6 e0ed      	LDI  R30,LOW(13)
0001b7 93ea      	ST   -Y,R30
0001b8 e8a0      	LDI  R26,LOW(128)
0001b9 df6c      	RCALL _clr_bit_mask_G000
                 ; 0000 007B     if(!i) return 0;
0001ba 3010      	CPI  R17,0
0001bb f411      	BRNE _0x15
0001bc e0e0      	LDI  R30,LOW(0)
0001bd c14f      	RJMP _0x20A0009
                 ; 0000 007C     if(rc522_read(ErrorReg)&0x1B) return 0;
                 _0x15:
0001be e0a6      	LDI  R26,LOW(6)
0001bf df4b      	RCALL _rc522_read_G000
0001c0 71eb      	ANDI R30,LOW(0x1B)
0001c1 f011      	BREQ _0x16
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 c149      	RJMP _0x20A0009
                 ; 0000 007D     n = rc522_read(FIFOLevelReg);
                 _0x16:
0001c4 e0aa      	LDI  R26,LOW(10)
0001c5 df45      	RCALL _rc522_read_G000
0001c6 2f0e      	MOV  R16,R30
                 ; 0000 007E     lastBits = rc522_read(ControlReg) & 0x07;
0001c7 e0ac      	LDI  R26,LOW(12)
0001c8 df42      	RCALL _rc522_read_G000
0001c9 70e7      	ANDI R30,LOW(0x7)
0001ca 2f3e      	MOV  R19,R30
                 ; 0000 007F     if(backBits){
0001cb 81ec      	LDD  R30,Y+4
0001cc 81fd      	LDD  R31,Y+4+1
0001cd 9730      	SBIW R30,0
0001ce f081      	BREQ _0x17
                 ; 0000 0080         if(lastBits) *backBits = (n-1)*8 + lastBits;
0001cf 3030      	CPI  R19,0
0001d0 f039      	BREQ _0x18
0001d1 2fe0      	MOV  R30,R16
0001d2 50e1      	SUBI R30,LOW(1)
0001d3 0fee      	LSL  R30
0001d4 0fee      	LSL  R30
0001d5 0fee      	LSL  R30
0001d6 0fe3      	ADD  R30,R19
0001d7 c004      	RJMP _0x68
                 ; 0000 0081         else         *backBits = n*8;
                 _0x18:
0001d8 2fe0      	MOV  R30,R16
0001d9 0fee      	LSL  R30
0001da 0fee      	LSL  R30
0001db 0fee      	LSL  R30
                 _0x68:
0001dc 81ac      	LDD  R26,Y+4
0001dd 81bd      	LDD  R27,Y+4+1
0001de 93ec      	ST   X,R30
                 ; 0000 0082     }
                 ; 0000 0083     for(i=0;i<n;i++) back[i]=rc522_read(FIFODataReg);
                 _0x17:
0001df e010      	LDI  R17,LOW(0)
                 _0x1B:
0001e0 1710      	CP   R17,R16
0001e1 f478      	BRSH _0x1C
0001e2 2fe1      	MOV  R30,R17
0001e3 81ae      	LDD  R26,Y+6
0001e4 81bf      	LDD  R27,Y+6+1
0001e5 e0f0      	LDI  R31,0
0001e6 0fea      	ADD  R30,R26
0001e7 1ffb      	ADC  R31,R27
0001e8 93ff      	PUSH R31
0001e9 93ef      	PUSH R30
0001ea e0a9      	LDI  R26,LOW(9)
0001eb df1f      	RCALL _rc522_read_G000
0001ec 91af      	POP  R26
0001ed 91bf      	POP  R27
0001ee 93ec      	ST   X,R30
0001ef 5f1f      	SUBI R17,-1
0001f0 cfef      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0084 return 1;
0001f1 e0e1      	LDI  R30,LOW(1)
0001f2 c11a      	RJMP _0x20A0009
                 ; 0000 0085 }
                 ; .FEND
                 ;
                 ;/* --- REQA/Anticoll/Select/Halt --- */
                 ;static uint8_t rc522_request(uint8_t reqMode, uint8_t *ATQA){
                 ; 0000 0088 static uint8_t rc522_request(uint8_t reqMode, uint8_t *ATQA){
                 _rc522_request_G000:
                 ; .FSTART _rc522_request_G000
                 ; 0000 0089     uint8_t cmd, back[4], bits;
                 ; 0000 008A     cmd=reqMode; bits=0;
0001f3 93ba      	ST   -Y,R27
0001f4 93aa      	ST   -Y,R26
0001f5 9724      	SBIW R28,4
0001f6 931a      	ST   -Y,R17
0001f7 930a      	ST   -Y,R16
                 ;	reqMode -> Y+8
                 ;	*ATQA -> Y+6
                 ;	cmd -> R17
                 ;	back -> Y+2
                 ;	bits -> R16
0001f8 8518      	LDD  R17,Y+8
0001f9 e000      	LDI  R16,LOW(0)
                 ; 0000 008B     rc522_write(BitFramingReg,0x07);
0001fa e0ed      	LDI  R30,LOW(13)
0001fb 93ea      	ST   -Y,R30
0001fc e0a7      	LDI  R26,LOW(7)
0001fd deff      	RCALL _rc522_write_G000
                 ; 0000 008C     if(!rc522_transceive(&cmd,1,back,&bits)) return 0;
0001fe b7ed      	IN   R30,SPL
0001ff b7fe      	IN   R31,SPH
000200 93fa      	ST   -Y,R31
000201 93ea      	ST   -Y,R30
000202 931f      	PUSH R17
000203 e0e1      	LDI  R30,LOW(1)
000204 940e 08cf 	CALL SUBOPT_0x5
000206 b7ad      	IN   R26,SPL
000207 b7be      	IN   R27,SPH
000208 930f      	PUSH R16
000209 df7d      	RCALL _rc522_transceive_G000
00020a 910f      	POP  R16
00020b 911f      	POP  R17
00020c 30e0      	CPI  R30,0
00020d f411      	BRNE _0x1D
00020e e0e0      	LDI  R30,LOW(0)
00020f c011      	RJMP _0x20A000C
                 ; 0000 008D     rc522_write(BitFramingReg,0x00);
                 _0x1D:
000210 e0ed      	LDI  R30,LOW(13)
000211 940e 08bb 	CALL SUBOPT_0x1
                 ; 0000 008E     if(bits!=16) return 0;
000213 3100      	CPI  R16,16
000214 f011      	BREQ _0x1E
000215 e0e0      	LDI  R30,LOW(0)
000216 c00a      	RJMP _0x20A000C
                 ; 0000 008F     ATQA[0]=back[0]; ATQA[1]=back[1];
                 _0x1E:
000217 81ea      	LDD  R30,Y+2
000218 81ae      	LDD  R26,Y+6
000219 81bf      	LDD  R27,Y+6+1
00021a 93ec      	ST   X,R30
00021b 81eb      	LDD  R30,Y+3
                +
00021c 81ae     +LDD R26 , Y + 6
00021d 81bf     +LDD R27 , Y + 6 + 1
00021e 9611     +ADIW R26 , 1
00021f 93ec     +ST X , R30
                 	__PUTB1SNS 6,1
                 ; 0000 0090     return 1;
000220 e0e1      	LDI  R30,LOW(1)
                 _0x20A000C:
000221 8119      	LDD  R17,Y+1
000222 8108      	LDD  R16,Y+0
000223 9629      	ADIW R28,9
000224 9508      	RET
                 ; 0000 0091 }
                 ; .FEND
                 ;static uint8_t rc522_anticoll_level(uint8_t level_cmd, uint8_t *out5){
                 ; 0000 0092 static uint8_t rc522_anticoll_level(uint8_t level_cmd, uint8_t *out5){
                 _rc522_anticoll_level_G000:
                 ; .FSTART _rc522_anticoll_level_G000
                 ; 0000 0093     uint8_t cmd[2], back[10], bits, i;
                 ; 0000 0094     bits=0;
000225 93ba      	ST   -Y,R27
000226 93aa      	ST   -Y,R26
000227 972c      	SBIW R28,12
000228 931a      	ST   -Y,R17
000229 930a      	ST   -Y,R16
                 ;	level_cmd -> Y+16
                 ;	*out5 -> Y+14
                 ;	cmd -> Y+12
                 ;	back -> Y+2
                 ;	bits -> R17
                 ;	i -> R16
00022a e010      	LDI  R17,LOW(0)
                 ; 0000 0095     cmd[0]=level_cmd; cmd[1]=0x20;
00022b 89e8      	LDD  R30,Y+16
00022c 87ec      	STD  Y+12,R30
00022d e2e0      	LDI  R30,LOW(32)
00022e 87ed      	STD  Y+13,R30
                 ; 0000 0096     rc522_write(BitFramingReg,0x00);
00022f e0ed      	LDI  R30,LOW(13)
000230 940e 08bb 	CALL SUBOPT_0x1
                 ; 0000 0097     rc522_write(CollReg,0x80);
000232 e0ee      	LDI  R30,LOW(14)
000233 93ea      	ST   -Y,R30
000234 e8a0      	LDI  R26,LOW(128)
000235 dec7      	RCALL _rc522_write_G000
                 ; 0000 0098     if(!rc522_transceive(cmd,2,back,&bits)) return 0;
000236 01fe      	MOVW R30,R28
000237 963c      	ADIW R30,12
000238 93fa      	ST   -Y,R31
000239 93ea      	ST   -Y,R30
00023a e0e2      	LDI  R30,LOW(2)
00023b 940e 08cf 	CALL SUBOPT_0x5
00023d b7ad      	IN   R26,SPL
00023e b7be      	IN   R27,SPH
00023f 931f      	PUSH R17
000240 df46      	RCALL _rc522_transceive_G000
000241 911f      	POP  R17
000242 30e0      	CPI  R30,0
000243 f411      	BRNE _0x1F
000244 e0e0      	LDI  R30,LOW(0)
000245 c011      	RJMP _0x20A000B
                 ; 0000 0099     if(bits!=40) return 0;
                 _0x1F:
000246 3218      	CPI  R17,40
000247 f011      	BREQ _0x20
000248 e0e0      	LDI  R30,LOW(0)
000249 c00d      	RJMP _0x20A000B
                 ; 0000 009A     for(i=0;i<5;i++) out5[i]=back[i];
                 _0x20:
00024a e000      	LDI  R16,LOW(0)
                 _0x22:
00024b 3005      	CPI  R16,5
00024c f448      	BRSH _0x23
00024d 2fe0      	MOV  R30,R16
00024e 85ae      	LDD  R26,Y+14
00024f 85bf      	LDD  R27,Y+14+1
000250 940e 08d5 	CALL SUBOPT_0x6
000252 940e 08dc 	CALL SUBOPT_0x7
000254 5f0f      	SUBI R16,-1
000255 cff5      	RJMP _0x22
                 _0x23:
                 ; 0000 009B return 1;
000256 e0e1      	LDI  R30,LOW(1)
                 _0x20A000B:
000257 8119      	LDD  R17,Y+1
000258 8108      	LDD  R16,Y+0
000259 9661      	ADIW R28,17
00025a 9508      	RET
                 ; 0000 009C }
                 ; .FEND
                 ;static uint8_t uid_bcc4(uint8_t *u4){
                 ; 0000 009D static uint8_t uid_bcc4(uint8_t *u4){
                 _uid_bcc4_G000:
                 ; .FSTART _uid_bcc4_G000
                 ; 0000 009E     uint8_t b;
                 ; 0000 009F     b = (uint8_t)(u4[0]^u4[1]^u4[2]^u4[3]);
00025b 93ba      	ST   -Y,R27
00025c 93aa      	ST   -Y,R26
00025d 931a      	ST   -Y,R17
                 ;	*u4 -> Y+1
                 ;	b -> R17
00025e 81a9      	LDD  R26,Y+1
00025f 81ba      	LDD  R27,Y+1+1
000260 91ac      	LD   R26,X
000261 81e9      	LDD  R30,Y+1
000262 81fa      	LDD  R31,Y+1+1
000263 81e1      	LDD  R30,Z+1
000264 27ae      	EOR  R26,R30
000265 81e9      	LDD  R30,Y+1
000266 81fa      	LDD  R31,Y+1+1
000267 81e2      	LDD  R30,Z+2
000268 27ae      	EOR  R26,R30
000269 81e9      	LDD  R30,Y+1
00026a 81fa      	LDD  R31,Y+1+1
00026b 81e3      	LDD  R30,Z+3
00026c 27ea      	EOR  R30,R26
00026d 2f1e      	MOV  R17,R30
                 ; 0000 00A0     return b;
00026e 940c 06bc 	JMP  _0x20A0003
                 ; 0000 00A1 }
                 ; .FEND
                 ;static uint8_t rc522_select_level(uint8_t level_cmd, uint8_t *uid4, uint8_t *sak_out){
                 ; 0000 00A2 static uint8_t rc522_select_level(uint8_t level_cmd, uint8_t *uid4, uint8_t *sak_out){
                 _rc522_select_level_G000:
                 ; .FSTART _rc522_select_level_G000
                 ; 0000 00A3     uint8_t f[9], crc[2], back[4], bits, bcc;
                 ; 0000 00A4     bits=0;
000270 93ba      	ST   -Y,R27
000271 93aa      	ST   -Y,R26
000272 972f      	SBIW R28,15
000273 931a      	ST   -Y,R17
000274 930a      	ST   -Y,R16
                 ;	level_cmd -> Y+21
                 ;	*uid4 -> Y+19
                 ;	*sak_out -> Y+17
                 ;	f -> Y+8
                 ;	crc -> Y+6
                 ;	back -> Y+2
                 ;	bits -> R17
                 ;	bcc -> R16
000275 e010      	LDI  R17,LOW(0)
                 ; 0000 00A5     rc522_write(BitFramingReg,0x00);
000276 e0ed      	LDI  R30,LOW(13)
000277 940e 08bb 	CALL SUBOPT_0x1
                 ; 0000 00A6     bcc = uid_bcc4(uid4);
000279 89ab      	LDD  R26,Y+19
00027a 89bc      	LDD  R27,Y+19+1
00027b dfdf      	RCALL _uid_bcc4_G000
00027c 2f0e      	MOV  R16,R30
                 ; 0000 00A7     f[0]=level_cmd; f[1]=0x70;
00027d 89ed      	LDD  R30,Y+21
00027e 87e8      	STD  Y+8,R30
00027f e7e0      	LDI  R30,LOW(112)
000280 87e9      	STD  Y+9,R30
                 ; 0000 00A8     f[2]=uid4[0];   f[3]=uid4[1]; f[4]=uid4[2]; f[5]=uid4[3];
000281 89ab      	LDD  R26,Y+19
000282 89bc      	LDD  R27,Y+19+1
000283 91ec      	LD   R30,X
000284 87ea      	STD  Y+10,R30
000285 89eb      	LDD  R30,Y+19
000286 89fc      	LDD  R31,Y+19+1
000287 81e1      	LDD  R30,Z+1
000288 87eb      	STD  Y+11,R30
000289 89eb      	LDD  R30,Y+19
00028a 89fc      	LDD  R31,Y+19+1
00028b 81e2      	LDD  R30,Z+2
00028c 87ec      	STD  Y+12,R30
00028d 89eb      	LDD  R30,Y+19
00028e 89fc      	LDD  R31,Y+19+1
00028f 81e3      	LDD  R30,Z+3
000290 87ed      	STD  Y+13,R30
                 ; 0000 00A9     f[6]=bcc; rc522_calc_crc(f,7,crc); f[7]=crc[0]; f[8]=crc[1];
000291 01fe      	MOVW R30,R28
000292 963e      	ADIW R30,14
000293 8300      	ST   Z,R16
000294 940e 08e4 	CALL SUBOPT_0x8
000296 e0e7      	LDI  R30,LOW(7)
000297 940e 08e9 	CALL SUBOPT_0x9
000299 87ef      	STD  Y+15,R30
00029a 81ef      	LDD  R30,Y+7
00029b 8be8      	STD  Y+16,R30
                 ; 0000 00AA     if(!rc522_transceive(f,9,back,&bits)) return 0;
00029c 940e 08e4 	CALL SUBOPT_0x8
00029e e0e9      	LDI  R30,LOW(9)
00029f 940e 08cf 	CALL SUBOPT_0x5
0002a1 b7ad      	IN   R26,SPL
0002a2 b7be      	IN   R27,SPH
0002a3 931f      	PUSH R17
0002a4 dee2      	RCALL _rc522_transceive_G000
0002a5 911f      	POP  R17
0002a6 30e0      	CPI  R30,0
0002a7 f411      	BRNE _0x24
0002a8 e0e0      	LDI  R30,LOW(0)
0002a9 c009      	RJMP _0x20A000A
                 ; 0000 00AB     if(bits!=24) return 0;
                 _0x24:
0002aa 3118      	CPI  R17,24
0002ab f011      	BREQ _0x25
0002ac e0e0      	LDI  R30,LOW(0)
0002ad c005      	RJMP _0x20A000A
                 ; 0000 00AC     *sak_out = back[0];
                 _0x25:
0002ae 81ea      	LDD  R30,Y+2
0002af 89a9      	LDD  R26,Y+17
0002b0 89ba      	LDD  R27,Y+17+1
0002b1 93ec      	ST   X,R30
                 ; 0000 00AD     return 1;
0002b2 e0e1      	LDI  R30,LOW(1)
                 _0x20A000A:
0002b3 8119      	LDD  R17,Y+1
0002b4 8108      	LDD  R16,Y+0
0002b5 9666      	ADIW R28,22
0002b6 9508      	RET
                 ; 0000 00AE }
                 ; .FEND
                 ;static uint8_t rc522_get_uid(uint8_t *uid){
                 ; 0000 00AF static uint8_t rc522_get_uid(uint8_t *uid){
                 _rc522_get_uid_G000:
                 ; .FSTART _rc522_get_uid_G000
                 ; 0000 00B0     uint8_t b[5], bcc, i, len;
                 ; 0000 00B1     len=0;
0002b7 93ba      	ST   -Y,R27
0002b8 93aa      	ST   -Y,R26
0002b9 9725      	SBIW R28,5
0002ba 940e 09ad 	CALL __SAVELOCR4
                 ;	*uid -> Y+9
                 ;	b -> Y+4
                 ;	bcc -> R17
                 ;	i -> R16
                 ;	len -> R19
0002bc e030      	LDI  R19,LOW(0)
                 ; 0000 00B2     if(!rc522_anticoll_level(PICC_ANTICOLL_CL1,b)) return 0;
0002bd e9e3      	LDI  R30,LOW(147)
0002be 940e 08f0 	CALL SUBOPT_0xA
0002c0 f411      	BRNE _0x26
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 c04a      	RJMP _0x20A0009
                 ; 0000 00B3     if(b[0]==0x88){
                 _0x26:
0002c3 81ac      	LDD  R26,Y+4
0002c4 38a8      	CPI  R26,LOW(0x88)
0002c5 f579      	BRNE _0x27
                 ; 0000 00B4         uid[0]=b[1]; uid[1]=b[2]; uid[2]=b[3];
0002c6 81ed      	LDD  R30,Y+5
0002c7 85a9      	LDD  R26,Y+9
0002c8 85ba      	LDD  R27,Y+9+1
0002c9 93ec      	ST   X,R30
0002ca 81ee      	LDD  R30,Y+6
                +
0002cb 85a9     +LDD R26 , Y + 9
0002cc 85ba     +LDD R27 , Y + 9 + 1
0002cd 9611     +ADIW R26 , 1
0002ce 93ec     +ST X , R30
                 	__PUTB1SNS 9,1
0002cf 81ef      	LDD  R30,Y+7
                +
0002d0 85a9     +LDD R26 , Y + 9
0002d1 85ba     +LDD R27 , Y + 9 + 1
0002d2 9612     +ADIW R26 , 2
0002d3 93ec     +ST X , R30
                 	__PUTB1SNS 9,2
                 ; 0000 00B5         if(!rc522_anticoll_level(PICC_ANTICOLL_CL2,b)) return 0;
0002d4 e9e5      	LDI  R30,LOW(149)
0002d5 940e 08f0 	CALL SUBOPT_0xA
0002d7 f411      	BRNE _0x28
0002d8 e0e0      	LDI  R30,LOW(0)
0002d9 c033      	RJMP _0x20A0009
                 ; 0000 00B6         bcc=b[0]^b[1]^b[2]^b[3]; if(bcc!=b[4]) return 0;
                 _0x28:
0002da 940e 08f7 	CALL SUBOPT_0xB
0002dc f011      	BREQ _0x29
0002dd e0e0      	LDI  R30,LOW(0)
0002de c02e      	RJMP _0x20A0009
                 ; 0000 00B7         uid[3]=b[0]; uid[4]=b[1]; uid[5]=b[2]; uid[6]=b[3];
                 _0x29:
0002df 81ec      	LDD  R30,Y+4
                +
0002e0 85a9     +LDD R26 , Y + 9
0002e1 85ba     +LDD R27 , Y + 9 + 1
0002e2 9613     +ADIW R26 , 3
0002e3 93ec     +ST X , R30
                 	__PUTB1SNS 9,3
0002e4 81ed      	LDD  R30,Y+5
                +
0002e5 85a9     +LDD R26 , Y + 9
0002e6 85ba     +LDD R27 , Y + 9 + 1
0002e7 9614     +ADIW R26 , 4
0002e8 93ec     +ST X , R30
                 	__PUTB1SNS 9,4
0002e9 81ee      	LDD  R30,Y+6
                +
0002ea 85a9     +LDD R26 , Y + 9
0002eb 85ba     +LDD R27 , Y + 9 + 1
0002ec 9615     +ADIW R26 , 5
0002ed 93ec     +ST X , R30
                 	__PUTB1SNS 9,5
0002ee 81ef      	LDD  R30,Y+7
                +
0002ef 85a9     +LDD R26 , Y + 9
0002f0 85ba     +LDD R27 , Y + 9 + 1
0002f1 9616     +ADIW R26 , 6
0002f2 93ec     +ST X , R30
                 	__PUTB1SNS 9,6
                 ; 0000 00B8         len=7;
0002f3 e037      	LDI  R19,LOW(7)
                 ; 0000 00B9     }else{
0002f4 c017      	RJMP _0x2A
                 _0x27:
                 ; 0000 00BA         bcc=b[0]^b[1]^b[2]^b[3]; if(bcc!=b[4]) return 0;
0002f5 940e 08f7 	CALL SUBOPT_0xB
0002f7 f011      	BREQ _0x2B
0002f8 e0e0      	LDI  R30,LOW(0)
0002f9 c013      	RJMP _0x20A0009
                 ; 0000 00BB         for(i=0;i<4;i++) uid[i]=b[i];
                 _0x2B:
0002fa e000      	LDI  R16,LOW(0)
                 _0x2D:
0002fb 3004      	CPI  R16,4
0002fc f470      	BRSH _0x2E
0002fd 2fe0      	MOV  R30,R16
0002fe 85a9      	LDD  R26,Y+9
0002ff 85ba      	LDD  R27,Y+9+1
000300 940e 08d5 	CALL SUBOPT_0x6
000302 01de      	MOVW R26,R28
000303 9614      	ADIW R26,4
000304 0fae      	ADD  R26,R30
000305 1fbf      	ADC  R27,R31
000306 91ec      	LD   R30,X
000307 01d0      	MOVW R26,R0
000308 93ec      	ST   X,R30
000309 5f0f      	SUBI R16,-1
00030a cff0      	RJMP _0x2D
                 _0x2E:
                 ; 0000 00BC len=4;
00030b e034      	LDI  R19,LOW(4)
                 ; 0000 00BD     }
                 _0x2A:
                 ; 0000 00BE     return len;
00030c 2fe3      	MOV  R30,R19
                 _0x20A0009:
00030d 940e 09b4 	CALL __LOADLOCR4
00030f 962b      	ADIW R28,11
000310 9508      	RET
                 ; 0000 00BF }
                 ; .FEND
                 ;static uint8_t rc522_select(uint8_t *uid, uint8_t uid_len, uint8_t *sak){
                 ; 0000 00C0 static uint8_t rc522_select(uint8_t *uid, uint8_t uid_len, uint8_t *sak){
                 _rc522_select_G000:
                 ; .FSTART _rc522_select_G000
                 ; 0000 00C1     uint8_t uid4[4], tmp;
                 ; 0000 00C2     if(uid_len==4){
000311 93ba      	ST   -Y,R27
000312 93aa      	ST   -Y,R26
000313 9724      	SBIW R28,4
000314 931a      	ST   -Y,R17
                 ;	*uid -> Y+8
                 ;	uid_len -> Y+7
                 ;	*sak -> Y+5
                 ;	uid4 -> Y+1
                 ;	tmp -> R17
000315 81af      	LDD  R26,Y+7
000316 30a4      	CPI  R26,LOW(0x4)
000317 f4a9      	BRNE _0x2F
                 ; 0000 00C3         uid4[0]=uid[0]; uid4[1]=uid[1]; uid4[2]=uid[2]; uid4[3]=uid[3];
000318 85a8      	LDD  R26,Y+8
000319 85b9      	LDD  R27,Y+8+1
00031a 91ec      	LD   R30,X
00031b 83e9      	STD  Y+1,R30
00031c 85e8      	LDD  R30,Y+8
00031d 85f9      	LDD  R31,Y+8+1
00031e 81e1      	LDD  R30,Z+1
00031f 83ea      	STD  Y+2,R30
000320 85e8      	LDD  R30,Y+8
000321 85f9      	LDD  R31,Y+8+1
000322 81e2      	LDD  R30,Z+2
000323 83eb      	STD  Y+3,R30
000324 85e8      	LDD  R30,Y+8
000325 85f9      	LDD  R31,Y+8+1
000326 81e3      	LDD  R30,Z+3
000327 940e 0902 	CALL SUBOPT_0xC
                 ; 0000 00C4         return rc522_select_level(PICC_SELECT_CL1, uid4, sak);
000329 85a8      	LDD  R26,Y+8
00032a 85b9      	LDD  R27,Y+8+1
00032b df44      	RCALL _rc522_select_level_G000
00032c c034      	RJMP _0x20A0007
                 ; 0000 00C5     }else if(uid_len==7){
                 _0x2F:
00032d 81af      	LDD  R26,Y+7
00032e 30a7      	CPI  R26,LOW(0x7)
00032f f581      	BRNE _0x31
                 ; 0000 00C6         uid4[0]=0x88; uid4[1]=uid[0]; uid4[2]=uid[1]; uid4[3]=uid[2];
000330 e8e8      	LDI  R30,LOW(136)
000331 83e9      	STD  Y+1,R30
000332 85a8      	LDD  R26,Y+8
000333 85b9      	LDD  R27,Y+8+1
000334 91ec      	LD   R30,X
000335 83ea      	STD  Y+2,R30
000336 85e8      	LDD  R30,Y+8
000337 85f9      	LDD  R31,Y+8+1
000338 81e1      	LDD  R30,Z+1
000339 83eb      	STD  Y+3,R30
00033a 85e8      	LDD  R30,Y+8
00033b 85f9      	LDD  R31,Y+8+1
00033c 81e2      	LDD  R30,Z+2
00033d 940e 0902 	CALL SUBOPT_0xC
                 ; 0000 00C7         if(!rc522_select_level(PICC_SELECT_CL1, uid4, &tmp)) return 0;
00033f b7ad      	IN   R26,SPL
000340 b7be      	IN   R27,SPH
000341 931f      	PUSH R17
000342 df2d      	RCALL _rc522_select_level_G000
000343 911f      	POP  R17
000344 30e0      	CPI  R30,0
000345 f0d1      	BREQ _0x20A0008
                 ; 0000 00C8         uid4[0]=uid[3]; uid4[1]=uid[4]; uid4[2]=uid[5]; uid4[3]=uid[6];
000346 85e8      	LDD  R30,Y+8
000347 85f9      	LDD  R31,Y+8+1
000348 81e3      	LDD  R30,Z+3
000349 83e9      	STD  Y+1,R30
00034a 85e8      	LDD  R30,Y+8
00034b 85f9      	LDD  R31,Y+8+1
00034c 81e4      	LDD  R30,Z+4
00034d 83ea      	STD  Y+2,R30
00034e 85e8      	LDD  R30,Y+8
00034f 85f9      	LDD  R31,Y+8+1
000350 81e5      	LDD  R30,Z+5
000351 83eb      	STD  Y+3,R30
000352 85e8      	LDD  R30,Y+8
000353 85f9      	LDD  R31,Y+8+1
000354 81e6      	LDD  R30,Z+6
000355 83ec      	STD  Y+4,R30
                 ; 0000 00C9         return rc522_select_level(PICC_SELECT_CL2, uid4, sak);
000356 e9e5      	LDI  R30,LOW(149)
000357 93ea      	ST   -Y,R30
000358 01fe      	MOVW R30,R28
000359 9632      	ADIW R30,2
00035a 93fa      	ST   -Y,R31
00035b 93ea      	ST   -Y,R30
00035c 85a8      	LDD  R26,Y+8
00035d 85b9      	LDD  R27,Y+8+1
00035e df11      	RCALL _rc522_select_level_G000
00035f c001      	RJMP _0x20A0007
                 ; 0000 00CA     }
                 ; 0000 00CB     return 0;
                 _0x31:
                 _0x20A0008:
000360 e0e0      	LDI  R30,LOW(0)
                 _0x20A0007:
000361 8118      	LDD  R17,Y+0
000362 962a      	ADIW R28,10
000363 9508      	RET
                 ; 0000 00CC }
                 ; .FEND
                 ;static uint8_t picc_halt(void){
                 ; 0000 00CD static uint8_t picc_halt(void){
                 _picc_halt_G000:
                 ; .FSTART _picc_halt_G000
                 ; 0000 00CE     uint8_t cmd[4], crc[2], back[4], bits, ok;
                 ; 0000 00CF     bits=0; ok=0;
000364 972a      	SBIW R28,10
000365 931a      	ST   -Y,R17
000366 930a      	ST   -Y,R16
                 ;	cmd -> Y+8
                 ;	crc -> Y+6
                 ;	back -> Y+2
                 ;	bits -> R17
                 ;	ok -> R16
000367 e010      	LDI  R17,LOW(0)
000368 e000      	LDI  R16,LOW(0)
                 ; 0000 00D0     cmd[0]=PICC_HALT; cmd[1]=0x00;
000369 e5e0      	LDI  R30,LOW(80)
00036a 87e8      	STD  Y+8,R30
00036b e0e0      	LDI  R30,LOW(0)
00036c 87e9      	STD  Y+9,R30
                 ; 0000 00D1     rc522_calc_crc(cmd,2,crc);
00036d 940e 08e4 	CALL SUBOPT_0x8
00036f e0e2      	LDI  R30,LOW(2)
000370 940e 08e9 	CALL SUBOPT_0x9
                 ; 0000 00D2     cmd[2]=crc[0]; cmd[3]=crc[1];
000372 87ea      	STD  Y+10,R30
000373 81ef      	LDD  R30,Y+7
000374 87eb      	STD  Y+11,R30
                 ; 0000 00D3     ok = rc522_transceive(cmd,4,back,&bits);
000375 940e 08e4 	CALL SUBOPT_0x8
000377 e0e4      	LDI  R30,LOW(4)
000378 940e 08cf 	CALL SUBOPT_0x5
00037a b7ad      	IN   R26,SPL
00037b b7be      	IN   R27,SPH
00037c 931f      	PUSH R17
00037d de09      	RCALL _rc522_transceive_G000
00037e 911f      	POP  R17
00037f 2f0e      	MOV  R16,R30
                 ; 0000 00D4     /* HALT expects no reply; ignore ok/bits */
                 ; 0000 00D5     return 1;
000380 e0e1      	LDI  R30,LOW(1)
000381 8119      	LDD  R17,Y+1
000382 8108      	LDD  R16,Y+0
000383 962c      	ADIW R28,12
000384 9508      	RET
                 ; 0000 00D6 }
                 ; .FEND
                 ;
                 ;/* --- Type detect --- */
                 ;static void lcd_puts_flash(flash char* s){ char c; while((c=*s++)) lcd_putchar(c); }
                 ; 0000 00D9 static void lcd_puts_flash(flash char* s){ char c; while((c=*s++)) lcd_putchar(c); }
                 _lcd_puts_flash_G000:
                 ; .FSTART _lcd_puts_flash_G000
000385 93ba      	ST   -Y,R27
000386 93aa      	ST   -Y,R26
000387 931a      	ST   -Y,R17
                 ;	*s -> Y+1
                 ;	c -> R17
                 _0x33:
000388 940e 090a 	CALL SUBOPT_0xD
00038a f021      	BREQ _0x35
00038b 2fa1      	MOV  R26,R17
00038c 940e 068f 	CALL _lcd_putchar
00038e cff9      	RJMP _0x33
                 _0x35:
00038f 940c 06bc 	JMP  _0x20A0003
                 ; .FEND
                 ;static flash char* type_from_sak(uint8_t sak){
                 ; 0000 00DA static flash char* type_from_sak(uint8_t sak){
                 _type_from_sak_G000:
                 ; .FSTART _type_from_sak_G000
                 ; 0000 00DB     uint8_t s;
                 ; 0000 00DC     s = sak & 0xFC;
000391 93aa      	ST   -Y,R26
000392 931a      	ST   -Y,R17
                 ;	sak -> Y+1
                 ;	s -> R17
000393 81e9      	LDD  R30,Y+1
000394 7fec      	ANDI R30,LOW(0xFC)
000395 2f1e      	MOV  R17,R30
                 ; 0000 00DD     if(s==0x08) return S_C1K;
000396 3018      	CPI  R17,8
000397 f429      	BRNE _0x36
000398 e5e4      	LDI  R30,LOW(_S_C1K_G000*2)
000399 e0f0      	LDI  R31,HIGH(_S_C1K_G000*2)
00039a 8118      	LDD  R17,Y+0
00039b 940c 0681 	JMP  _0x20A0004
                 ; 0000 00DE     if(s==0x18) return S_C4K;
                 _0x36:
00039d 3118      	CPI  R17,24
00039e f429      	BRNE _0x37
00039f e6e6      	LDI  R30,LOW(_S_C4K_G000*2)
0003a0 e0f0      	LDI  R31,HIGH(_S_C4K_G000*2)
0003a1 8118      	LDD  R17,Y+0
0003a2 940c 0681 	JMP  _0x20A0004
                 ; 0000 00DF     if(s==0x00) return S_UL;
                 _0x37:
0003a4 3010      	CPI  R17,0
0003a5 f429      	BRNE _0x38
0003a6 e7e8      	LDI  R30,LOW(_S_UL_G000*2)
0003a7 e0f0      	LDI  R31,HIGH(_S_UL_G000*2)
0003a8 8118      	LDD  R17,Y+0
0003a9 940c 0681 	JMP  _0x20A0004
                 ; 0000 00E0     return S_UNK;
                 _0x38:
0003ab e8e8      	LDI  R30,LOW(_S_UNK_G000*2)
0003ac e0f0      	LDI  R31,HIGH(_S_UNK_G000*2)
0003ad 8118      	LDD  R17,Y+0
0003ae 940c 0681 	JMP  _0x20A0004
                 ; 0000 00E1 }
                 ; .FEND
                 ;
                 ;/* --- MIFARE Classic auth/read --- */
                 ;static uint8_t mifare_auth(uint8_t auth_cmd, uint8_t blockAddr, uint8_t *uid4, uint8_t *key6){
                 ; 0000 00E4 static uint8_t mifare_auth(uint8_t auth_cmd, uint8_t blockAddr, uint8_t *uid4, uint8_t *key6){
                 _mifare_auth_G000:
                 ; .FSTART _mifare_auth_G000
                 ; 0000 00E5     uint8_t i;
                 ; 0000 00E6     rc522_write(CommandReg, PCD_Idle);
0003b0 940e 08bf 	CALL SUBOPT_0x2
                 ;	auth_cmd -> Y+6
                 ;	blockAddr -> Y+5
                 ;	*uid4 -> Y+3
                 ;	*key6 -> Y+1
                 ;	i -> R17
                 ; 0000 00E7     set_bit_mask(FIFOLevelReg,0x80);
0003b2 940e 08c4 	CALL SUBOPT_0x3
                 ; 0000 00E8     rc522_write(FIFODataReg, auth_cmd);
0003b4 e0e9      	LDI  R30,LOW(9)
0003b5 93ea      	ST   -Y,R30
0003b6 81af      	LDD  R26,Y+7
0003b7 dd45      	RCALL _rc522_write_G000
                 ; 0000 00E9     rc522_write(FIFODataReg, blockAddr);
0003b8 e0e9      	LDI  R30,LOW(9)
0003b9 93ea      	ST   -Y,R30
0003ba 81ae      	LDD  R26,Y+6
0003bb dd41      	RCALL _rc522_write_G000
                 ; 0000 00EA     for(i=0;i<6;i++) rc522_write(FIFODataReg, key6[i]);
0003bc e010      	LDI  R17,LOW(0)
                 _0x3A:
0003bd 3016      	CPI  R17,6
0003be f440      	BRSH _0x3B
0003bf e0e9      	LDI  R30,LOW(9)
0003c0 93ea      	ST   -Y,R30
0003c1 81aa      	LDD  R26,Y+2
0003c2 81bb      	LDD  R27,Y+2+1
0003c3 940e 08c9 	CALL SUBOPT_0x4
0003c5 5f1f      	SUBI R17,-1
0003c6 cff6      	RJMP _0x3A
                 _0x3B:
                 ; 0000 00EB for(i=0;i<4;i++) rc522_write(0x09, uid4[i]);
0003c7 e010      	LDI  R17,LOW(0)
                 _0x3D:
0003c8 3014      	CPI  R17,4
0003c9 f440      	BRSH _0x3E
0003ca e0e9      	LDI  R30,LOW(9)
0003cb 93ea      	ST   -Y,R30
0003cc 81ac      	LDD  R26,Y+4
0003cd 81bd      	LDD  R27,Y+4+1
0003ce 940e 08c9 	CALL SUBOPT_0x4
0003d0 5f1f      	SUBI R17,-1
0003d1 cff6      	RJMP _0x3D
                 _0x3E:
                 ; 0000 00EC rc522_write(0x01, 0x0E);
0003d2 e0e1      	LDI  R30,LOW(1)
0003d3 93ea      	ST   -Y,R30
0003d4 e0ae      	LDI  R26,LOW(14)
0003d5 dd27      	RCALL _rc522_write_G000
                 ; 0000 00ED     for(i=0;i<200;i++){
0003d6 e010      	LDI  R17,LOW(0)
                 _0x40:
0003d7 3c18      	CPI  R17,200
0003d8 f468      	BRSH _0x41
                 ; 0000 00EE         if(rc522_read(Status2Reg) & 0x08) return 1;
0003d9 e0a8      	LDI  R26,LOW(8)
0003da dd30      	RCALL _rc522_read_G000
0003db 70e8      	ANDI R30,LOW(0x8)
0003dc f019      	BREQ _0x42
0003dd e0e1      	LDI  R30,LOW(1)
0003de 8118      	LDD  R17,Y+0
0003df c0aa      	RJMP _0x20A0005
                 ; 0000 00EF         delay_ms(1);
                 _0x42:
0003e0 e0a1      	LDI  R26,LOW(1)
0003e1 e0b0      	LDI  R27,0
0003e2 940e 0984 	CALL _delay_ms
                 ; 0000 00F0     }
0003e4 5f1f      	SUBI R17,-1
0003e5 cff1      	RJMP _0x40
                 _0x41:
                 ; 0000 00F1     return 0;
0003e6 e0e0      	LDI  R30,LOW(0)
0003e7 8118      	LDD  R17,Y+0
0003e8 c0a1      	RJMP _0x20A0005
                 ; 0000 00F2 }
                 ; .FEND
                 ;static void mifare_stop_crypto(void){
                 ; 0000 00F3 static void mifare_stop_crypto(void){
                 _mifare_stop_crypto_G000:
                 ; .FSTART _mifare_stop_crypto_G000
                 ; 0000 00F4     clr_bit_mask(Status2Reg,0x08);
0003e9 e0e8      	LDI  R30,LOW(8)
0003ea 93ea      	ST   -Y,R30
0003eb e0a8      	LDI  R26,LOW(8)
0003ec dd39      	RCALL _clr_bit_mask_G000
                 ; 0000 00F5     rc522_write(CommandReg, PCD_Idle);
0003ed e0e1      	LDI  R30,LOW(1)
0003ee 940e 08bb 	CALL SUBOPT_0x1
                 ; 0000 00F6 }
0003f0 9508      	RET
                 ; .FEND
                 ;static uint8_t mifare_read_block(uint8_t blockAddr, uint8_t *out16){
                 ; 0000 00F7 static uint8_t mifare_read_block(uint8_t blockAddr, uint8_t *out16){
                 _mifare_read_block_G000:
                 ; .FSTART _mifare_read_block_G000
                 ; 0000 00F8     uint8_t cmd[4], crc[2], back[32], bits, i;
                 ; 0000 00F9     bits=0;
0003f1 93ba      	ST   -Y,R27
0003f2 93aa      	ST   -Y,R26
0003f3 97a6      	SBIW R28,38
0003f4 931a      	ST   -Y,R17
0003f5 930a      	ST   -Y,R16
                 ;	blockAddr -> Y+42
                 ;	*out16 -> Y+40
                 ;	cmd -> Y+36
                 ;	crc -> Y+34
                 ;	back -> Y+2
                 ;	bits -> R17
                 ;	i -> R16
0003f6 e010      	LDI  R17,LOW(0)
                 ; 0000 00FA     cmd[0]=MF_READ; cmd[1]=blockAddr;
0003f7 e3e0      	LDI  R30,LOW(48)
0003f8 a3ec      	STD  Y+36,R30
0003f9 a5ea      	LDD  R30,Y+42
0003fa a3ed      	STD  Y+37,R30
                 ; 0000 00FB     rc522_calc_crc(cmd,2,crc);
0003fb 01fe      	MOVW R30,R28
0003fc 96b4      	ADIW R30,36
0003fd 93fa      	ST   -Y,R31
0003fe 93ea      	ST   -Y,R30
0003ff e0e2      	LDI  R30,LOW(2)
000400 93ea      	ST   -Y,R30
000401 01de      	MOVW R26,R28
000402 9695      	ADIW R26,37
000403 dd58      	RCALL _rc522_calc_crc_G000
                 ; 0000 00FC     cmd[2]=crc[0]; cmd[3]=crc[1];
000404 a1ea      	LDD  R30,Y+34
000405 a3ee      	STD  Y+38,R30
000406 a1eb      	LDD  R30,Y+35
000407 a3ef      	STD  Y+39,R30
                 ; 0000 00FD     if(!rc522_transceive(cmd,4,back,&bits)) return 0;
000408 01fe      	MOVW R30,R28
000409 96b4      	ADIW R30,36
00040a 93fa      	ST   -Y,R31
00040b 93ea      	ST   -Y,R30
00040c e0e4      	LDI  R30,LOW(4)
00040d 940e 08cf 	CALL SUBOPT_0x5
00040f b7ad      	IN   R26,SPL
000410 b7be      	IN   R27,SPH
000411 931f      	PUSH R17
000412 dd74      	RCALL _rc522_transceive_G000
000413 911f      	POP  R17
000414 30e0      	CPI  R30,0
000415 f411      	BRNE _0x43
000416 e0e0      	LDI  R30,LOW(0)
000417 c011      	RJMP _0x20A0006
                 ; 0000 00FE     if(bits < 16*8) return 0;
                 _0x43:
000418 3810      	CPI  R17,128
000419 f410      	BRSH _0x44
00041a e0e0      	LDI  R30,LOW(0)
00041b c00d      	RJMP _0x20A0006
                 ; 0000 00FF     for(i=0;i<16;i++) out16[i]=back[i];
                 _0x44:
00041c e000      	LDI  R16,LOW(0)
                 _0x46:
00041d 3100      	CPI  R16,16
00041e f448      	BRSH _0x47
00041f 2fe0      	MOV  R30,R16
000420 a5a8      	LDD  R26,Y+40
000421 a5b9      	LDD  R27,Y+40+1
000422 940e 08d5 	CALL SUBOPT_0x6
000424 940e 08dc 	CALL SUBOPT_0x7
000426 5f0f      	SUBI R16,-1
000427 cff5      	RJMP _0x46
                 _0x47:
                 ; 0000 0100 return 1;
000428 e0e1      	LDI  R30,LOW(1)
                 _0x20A0006:
000429 8119      	LDD  R17,Y+1
00042a 8108      	LDD  R16,Y+0
00042b 96ab      	ADIW R28,43
00042c 9508      	RET
                 ; 0000 0101 }
                 ; .FEND
                 ;
                 ;static uint8_t get_c_bits_for_block(uint8_t *trailer, uint8_t blockOffset,
                 ; 0000 0104                                     uint8_t *c1, uint8_t *c2, uint8_t *c3)
                 ; 0000 0105 {
                 _get_c_bits_for_block_G000:
                 ; .FSTART _get_c_bits_for_block_G000
                 ; 0000 0106     uint8_t b7 = trailer[7];
                 ; 0000 0107     uint8_t b8 = trailer[8];
                 ; 0000 0108     uint8_t i  = (blockOffset & 0x03);
                 ; 0000 0109 
                 ; 0000 010A     /* Per NXP: C1 from B7[4+i], C2 from B8[4+i], C3 from B8[i] */
                 ; 0000 010B     *c1 = (uint8_t)((b7 >> (4 + i)) & 0x01);
00042d 93ba      	ST   -Y,R27
00042e 93aa      	ST   -Y,R26
00042f 940e 09ad 	CALL __SAVELOCR4
                 ;	*trailer -> Y+11
                 ;	blockOffset -> Y+10
                 ;	*c1 -> Y+8
                 ;	*c2 -> Y+6
                 ;	*c3 -> Y+4
                 ;	b7 -> R17
                 ;	b8 -> R16
                 ;	i -> R19
000431 85eb      	LDD  R30,Y+11
000432 85fc      	LDD  R31,Y+11+1
000433 81e7      	LDD  R30,Z+7
000434 2f1e      	MOV  R17,R30
000435 85eb      	LDD  R30,Y+11
000436 85fc      	LDD  R31,Y+11+1
000437 85e0      	LDD  R30,Z+8
000438 2f0e      	MOV  R16,R30
000439 85ea      	LDD  R30,Y+10
00043a 70e3      	ANDI R30,LOW(0x3)
00043b 2f3e      	MOV  R19,R30
00043c 5fec      	SUBI R30,-LOW(4)
00043d 2fa1      	MOV  R26,R17
00043e 940e 0996 	CALL __LSRB12
000440 70e1      	ANDI R30,LOW(0x1)
000441 85a8      	LDD  R26,Y+8
000442 85b9      	LDD  R27,Y+8+1
000443 93ec      	ST   X,R30
                 ; 0000 010C     *c2 = (uint8_t)((b8 >> (4 + i)) & 0x01);
000444 2fe3      	MOV  R30,R19
000445 5fec      	SUBI R30,-LOW(4)
000446 2fa0      	MOV  R26,R16
000447 940e 0996 	CALL __LSRB12
000449 70e1      	ANDI R30,LOW(0x1)
00044a 81ae      	LDD  R26,Y+6
00044b 81bf      	LDD  R27,Y+6+1
00044c 93ec      	ST   X,R30
                 ; 0000 010D     *c3 = (uint8_t)((b8 >> (0 + i)) & 0x01);
00044d 2fe3      	MOV  R30,R19
00044e 2fa0      	MOV  R26,R16
00044f 940e 0996 	CALL __LSRB12
000451 70e1      	ANDI R30,LOW(0x1)
000452 81ac      	LDD  R26,Y+4
000453 81bd      	LDD  R27,Y+4+1
000454 93ec      	ST   X,R30
                 ; 0000 010E     return 1;
000455 e0e1      	LDI  R30,LOW(1)
000456 940e 09b4 	CALL __LOADLOCR4
000458 962d      	ADIW R28,13
000459 9508      	RET
                 ; 0000 010F }
                 ; .FEND
                 ;
                 ;/* replaces previous data_block_is_readonly (???? ?????? ???? ???) */
                 ;static uint8_t data_block_is_readonly(uint8_t c1, uint8_t c2, uint8_t c3)
                 ; 0000 0113 {
                 _data_block_is_readonly_G000:
                 ; .FSTART _data_block_is_readonly_G000
                 ; 0000 0114     uint8_t code = (uint8_t)((c1<<2)|(c2<<1)|c3);
                 ; 0000 0115     /* 010, 001, 101, 111 => never write */
                 ; 0000 0116     return (code==2 || code==1 || code==5 || code==7) ? 1 : 0;
00045a 93aa      	ST   -Y,R26
00045b 931a      	ST   -Y,R17
                 ;	c1 -> Y+3
                 ;	c2 -> Y+2
                 ;	c3 -> Y+1
                 ;	code -> R17
00045c 81eb      	LDD  R30,Y+3
00045d 0fee      	LSL  R30
00045e 0fee      	LSL  R30
00045f 2fae      	MOV  R26,R30
000460 81ea      	LDD  R30,Y+2
000461 0fee      	LSL  R30
000462 2bea      	OR   R30,R26
000463 81a9      	LDD  R26,Y+1
000464 2bea      	OR   R30,R26
000465 2f1e      	MOV  R17,R30
000466 3012      	CPI  R17,2
000467 f031      	BREQ _0x48
000468 3011      	CPI  R17,1
000469 f021      	BREQ _0x48
00046a 3015      	CPI  R17,5
00046b f011      	BREQ _0x48
00046c 3017      	CPI  R17,7
00046d f411      	BRNE _0x4A
                 _0x48:
00046e e0e1      	LDI  R30,LOW(1)
00046f c001      	RJMP _0x4B
                 _0x4A:
000470 e0e0      	LDI  R30,LOW(0)
                 _0x4B:
000471 8118      	LDD  R17,Y+0
000472 9624      	ADIW R28,4
000473 9508      	RET
                 ; 0000 0117 }
                 ; .FEND
                 ;
                 ;
                 ;/* --- Re-select helper --- */
                 ;static uint8_t rc522_reselect(uint8_t *uid, uint8_t uid_len, uint8_t *sak){
                 ; 0000 011B static uint8_t rc522_reselect(uint8_t *uid, uint8_t uid_len, uint8_t *sak){
                 _rc522_reselect_G000:
                 ; .FSTART _rc522_reselect_G000
                 ; 0000 011C     uint8_t atqa[2];
                 ; 0000 011D     picc_halt();
000474 93ba      	ST   -Y,R27
000475 93aa      	ST   -Y,R26
000476 9722      	SBIW R28,2
                 ;	*uid -> Y+5
                 ;	uid_len -> Y+4
                 ;	*sak -> Y+2
                 ;	atqa -> Y+0
000477 deec      	RCALL _picc_halt_G000
                 ; 0000 011E     delay_ms(5);
000478 e0a5      	LDI  R26,LOW(5)
000479 e0b0      	LDI  R27,0
00047a 940e 0984 	CALL _delay_ms
                 ; 0000 011F     rc522_request(PICC_REQIDL, atqa);
00047c e2e6      	LDI  R30,LOW(38)
00047d 93ea      	ST   -Y,R30
00047e 01de      	MOVW R26,R28
00047f 9611      	ADIW R26,1
000480 dd72      	RCALL _rc522_request_G000
                 ; 0000 0120     return rc522_select(uid, uid_len, sak);
000481 81ed      	LDD  R30,Y+5
000482 81fe      	LDD  R31,Y+5+1
000483 93fa      	ST   -Y,R31
000484 93ea      	ST   -Y,R30
000485 81ee      	LDD  R30,Y+6
000486 93ea      	ST   -Y,R30
000487 81ad      	LDD  R26,Y+5
000488 81be      	LDD  R27,Y+5+1
000489 de87      	RCALL _rc522_select_G000
                 _0x20A0005:
00048a 9627      	ADIW R28,7
00048b 9508      	RET
                 ; 0000 0121 }
                 ; .FEND
                 ;
                 ;void main(void){
                 ; 0000 0123 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 0124     char line[21];
                 ; 0000 0125     uint8_t atqa[2];
                 ; 0000 0126     uint8_t uid[10];
                 ; 0000 0127     uint8_t uid_len;
                 ; 0000 0128     uint8_t sak;
                 ; 0000 0129     uint8_t uid4[4];
                 ; 0000 012A     uint8_t blk4[16];
                 ; 0000 012B     uint8_t trailer[16];
                 ; 0000 012C     uint8_t c1,c2,c3;
                 ; 0000 012D     uint8_t is_ro;
                 ; 0000 012E     uint8_t i;
                 ; 0000 012F     flash char* type_str;
                 ; 0000 0130 
                 ; 0000 0131     /* Minimal MCU/SPI setup */
                 ; 0000 0132     DDRA=0x00; PORTA=0x00;
00048c 97ef      	SBIW R28,63
00048d 9729      	SBIW R28,9
                 ;	line -> Y+51
                 ;	atqa -> Y+49
                 ;	uid -> Y+39
                 ;	uid_len -> R17
                 ;	sak -> R16
                 ;	uid4 -> Y+35
                 ;	blk4 -> Y+19
                 ;	trailer -> Y+3
                 ;	c1 -> R19
                 ;	c2 -> R18
                 ;	c3 -> R21
                 ;	is_ro -> R20
                 ;	i -> Y+2
                 ;	*type_str -> Y+0
00048e e0e0      	LDI  R30,LOW(0)
00048f bbea      	OUT  0x1A,R30
000490 bbeb      	OUT  0x1B,R30
                 ; 0000 0133     DDRB=(1<<DDB7)|(1<<DDB5)|(1<<DDB4); PORTB=0x00;
000491 ebe0      	LDI  R30,LOW(176)
000492 bbe7      	OUT  0x17,R30
000493 e0e0      	LDI  R30,LOW(0)
000494 bbe8      	OUT  0x18,R30
                 ; 0000 0134     DDRC=0x00; PORTC=0x00;
000495 bbe4      	OUT  0x14,R30
000496 bbe5      	OUT  0x15,R30
                 ; 0000 0135     DDRD=0x00; PORTD=0x00;
000497 bbe1      	OUT  0x11,R30
000498 bbe2      	OUT  0x12,R30
                 ; 0000 0136     TCCR0=0; TCCR1A=0; TCCR1B=0; TCCR2=0; TIMSK=0;
000499 bfe3      	OUT  0x33,R30
00049a bdef      	OUT  0x2F,R30
00049b bdee      	OUT  0x2E,R30
00049c bde5      	OUT  0x25,R30
00049d bfe9      	OUT  0x39,R30
                 ; 0000 0137     MCUCR=0; MCUCSR=0;
00049e bfe5      	OUT  0x35,R30
00049f bfe4      	OUT  0x34,R30
                 ; 0000 0138     UCSRB=0;
0004a0 b9ea      	OUT  0xA,R30
                 ; 0000 0139     ACSR=(1<<ACD); SFIOR=0;
0004a1 e8e0      	LDI  R30,LOW(128)
0004a2 b9e8      	OUT  0x8,R30
0004a3 e0e0      	LDI  R30,LOW(0)
0004a4 bfe0      	OUT  0x30,R30
                 ; 0000 013A     ADCSRA=0;
0004a5 b9e6      	OUT  0x6,R30
                 ; 0000 013B     SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1); SPSR=0;
0004a6 e5e2      	LDI  R30,LOW(82)
0004a7 b9ed      	OUT  0xD,R30
0004a8 e0e0      	LDI  R30,LOW(0)
0004a9 b9ee      	OUT  0xE,R30
                 ; 0000 013C 
                 ; 0000 013D     RC522_CS_DDR |= (1<<RC522_CS_PIN);
0004aa 9abc      	SBI  0x17,4
                 ; 0000 013E     RC522_CS_PORT |= (1<<RC522_CS_PIN);
0004ab 9ac4      	SBI  0x18,4
                 ; 0000 013F 
                 ; 0000 0140     lcd_init(16);
0004ac e1a0      	LDI  R26,LOW(16)
0004ad 940e 06bf 	CALL _lcd_init
                 ; 0000 0141     lcd_clear(); lcd_putsf("RC522 Ready");
0004af 940e 0683 	CALL _lcd_clear
                +
0004b1 eba4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0004b2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0004b3 940e 06b3 	CALL _lcd_putsf
                 ; 0000 0142     delay_ms(300);
0004b5 e2ac      	LDI  R26,LOW(300)
0004b6 e0b1      	LDI  R27,HIGH(300)
0004b7 940e 0984 	CALL _delay_ms
                 ; 0000 0143 
                 ; 0000 0144     rc522_init();
0004b9 dc88      	RCALL _rc522_init_G000
                 ; 0000 0145 
                 ; 0000 0146     while(1){
                 _0x4D:
                 ; 0000 0147         lcd_clear(); lcd_putsf("Scan a card...");
0004ba 940e 0683 	CALL _lcd_clear
                +
0004bc eca0     +LDI R26 , LOW ( 2 * _0x0 + ( 12 ) )
0004bd e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW2FN _0x0,12
0004be 940e 06b3 	CALL _lcd_putsf
                 ; 0000 0148         delay_ms(120);
0004c0 e7a8      	LDI  R26,LOW(120)
0004c1 e0b0      	LDI  R27,0
0004c2 940e 0984 	CALL _delay_ms
                 ; 0000 0149 
                 ; 0000 014A         if(!rc522_request(PICC_REQIDL, atqa)) { delay_ms(120); continue; }
0004c4 e2e6      	LDI  R30,LOW(38)
0004c5 93ea      	ST   -Y,R30
0004c6 01de      	MOVW R26,R28
0004c7 96d2      	ADIW R26,50
0004c8 dd2a      	RCALL _rc522_request_G000
0004c9 30e0      	CPI  R30,0
0004ca f429      	BRNE _0x50
0004cb e7a8      	LDI  R26,LOW(120)
0004cc e0b0      	LDI  R27,0
0004cd 940e 0984 	CALL _delay_ms
0004cf cfea      	RJMP _0x4D
                 ; 0000 014B 
                 ; 0000 014C         uid_len = rc522_get_uid(uid);
                 _0x50:
0004d0 01de      	MOVW R26,R28
0004d1 9697      	ADIW R26,39
0004d2 dde4      	RCALL _rc522_get_uid_G000
0004d3 2f1e      	MOV  R17,R30
                 ; 0000 014D         if(!uid_len || !rc522_select(uid, uid_len, &sak)){
0004d4 3010      	CPI  R17,0
0004d5 f061      	BREQ _0x52
0004d6 01fe      	MOVW R30,R28
0004d7 96b7      	ADIW R30,39
0004d8 93fa      	ST   -Y,R31
0004d9 93ea      	ST   -Y,R30
0004da 931a      	ST   -Y,R17
0004db b7ad      	IN   R26,SPL
0004dc b7be      	IN   R27,SPH
0004dd 930f      	PUSH R16
0004de de32      	RCALL _rc522_select_G000
0004df 910f      	POP  R16
0004e0 30e0      	CPI  R30,0
0004e1 f451      	BRNE _0x51
                 _0x52:
                 ; 0000 014E             lcd_clear(); lcd_putsf("Select failed");
0004e2 d1a0      	RCALL _lcd_clear
                +
0004e3 ecaf     +LDI R26 , LOW ( 2 * _0x0 + ( 27 ) )
0004e4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 27 ) )
                 	__POINTW2FN _0x0,27
0004e5 940e 06b3 	CALL _lcd_putsf
                 ; 0000 014F             delay_ms(600);
0004e7 e5a8      	LDI  R26,LOW(600)
0004e8 e0b2      	LDI  R27,HIGH(600)
0004e9 940e 0984 	CALL _delay_ms
                 ; 0000 0150             continue;
0004eb cfce      	RJMP _0x4D
                 ; 0000 0151         }
                 ; 0000 0152 
                 ; 0000 0153         type_str = type_from_sak(sak);
                 _0x51:
0004ec 2fa0      	MOV  R26,R16
0004ed dea3      	RCALL _type_from_sak_G000
0004ee 83e8      	ST   Y,R30
0004ef 83f9      	STD  Y+1,R31
                 ; 0000 0154 
                 ; 0000 0155         lcd_clear();
0004f0 d192      	RCALL _lcd_clear
                 ; 0000 0156         lcd_gotoxy(0,0); lcd_puts_flash(type_str);
0004f1 e0e0      	LDI  R30,LOW(0)
0004f2 940e 0914 	CALL SUBOPT_0xE
0004f4 81a8      	LD   R26,Y
0004f5 81b9      	LDD  R27,Y+1
0004f6 de8e      	RCALL _lcd_puts_flash_G000
                 ; 0000 0157         sprintf(line,"SAK:%02X", sak);
0004f7 940e 0918 	CALL SUBOPT_0xF
                +
0004f9 eded     +LDI R30 , LOW ( 2 * _0x0 + ( 41 ) )
0004fa e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 41 ) )
                 	__POINTW1FN _0x0,41
0004fb 93fa      	ST   -Y,R31
0004fc 93ea      	ST   -Y,R30
0004fd 2fe0      	MOV  R30,R16
0004fe 940e 091d 	CALL SUBOPT_0x10
000500 e084      	LDI  R24,4
000501 940e 0868 	CALL _sprintf
000503 9628      	ADIW R28,8
                 ; 0000 0158         lcd_gotoxy(0,1); lcd_puts(line);
000504 940e 0923 	CALL SUBOPT_0x11
000506 940e 0928 	CALL SUBOPT_0x12
                 ; 0000 0159         delay_ms(400);
000508 e9a0      	LDI  R26,LOW(400)
000509 e0b1      	LDI  R27,HIGH(400)
00050a 940e 0984 	CALL _delay_ms
                 ; 0000 015A 
                 ; 0000 015B         lcd_clear();
00050c d176      	RCALL _lcd_clear
                 ; 0000 015C         if(uid_len==4){
00050d 3014      	CPI  R17,4
00050e f4a9      	BRNE _0x54
                 ; 0000 015D             sprintf(line,"UID:%02X%02X%02X%02X", uid[0],uid[1],uid[2],uid[3]);
00050f 940e 0918 	CALL SUBOPT_0xF
000511 940e 092c 	CALL SUBOPT_0x13
000513 a9e8      	LDD  R30,Y+48
000514 940e 091d 	CALL SUBOPT_0x10
000516 a9ed      	LDD  R30,Y+53
000517 940e 091d 	CALL SUBOPT_0x10
000519 adea      	LDD  R30,Y+58
00051a 940e 091d 	CALL SUBOPT_0x10
00051c e180      	LDI  R24,16
00051d 940e 0868 	CALL _sprintf
00051f 9664      	ADIW R28,20
                 ; 0000 015E             lcd_gotoxy(0,0); lcd_puts(line);
000520 e0e0      	LDI  R30,LOW(0)
000521 93ea      	ST   -Y,R30
000522 e0a0      	LDI  R26,LOW(0)
000523 c02a      	RJMP _0x69
                 ; 0000 015F         }else{
                 _0x54:
                 ; 0000 0160             sprintf(line,"UID:%02X%02X%02X%02X", uid[0],uid[1],uid[2],uid[3]);
000524 940e 0918 	CALL SUBOPT_0xF
000526 940e 092c 	CALL SUBOPT_0x13
000528 a9e8      	LDD  R30,Y+48
000529 940e 091d 	CALL SUBOPT_0x10
00052b a9ed      	LDD  R30,Y+53
00052c 940e 091d 	CALL SUBOPT_0x10
00052e adea      	LDD  R30,Y+58
00052f 940e 091d 	CALL SUBOPT_0x10
000531 e180      	LDI  R24,16
000532 940e 0868 	CALL _sprintf
000534 9664      	ADIW R28,20
                 ; 0000 0161             lcd_gotoxy(0,0); lcd_puts(line);
000535 e0e0      	LDI  R30,LOW(0)
000536 940e 0914 	CALL SUBOPT_0xE
000538 940e 0928 	CALL SUBOPT_0x12
                 ; 0000 0162             sprintf(line,"%02X%02X%02X", uid[4],uid[5],uid[6]);
00053a 940e 0918 	CALL SUBOPT_0xF
                +
00053c eeee     +LDI R30 , LOW ( 2 * _0x0 + ( 58 ) )
00053d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW1FN _0x0,58
00053e 93fa      	ST   -Y,R31
00053f 93ea      	ST   -Y,R30
000540 a5ef      	LDD  R30,Y+47
000541 940e 091d 	CALL SUBOPT_0x10
000543 a9ec      	LDD  R30,Y+52
000544 940e 091d 	CALL SUBOPT_0x10
000546 ade9      	LDD  R30,Y+57
000547 940e 091d 	CALL SUBOPT_0x10
000549 940e 0932 	CALL SUBOPT_0x14
                 ; 0000 0163             lcd_gotoxy(0,1); lcd_puts(line);
00054b e0e0      	LDI  R30,LOW(0)
00054c 93ea      	ST   -Y,R30
00054d e0a1      	LDI  R26,LOW(1)
                 _0x69:
00054e d127      	RCALL _lcd_gotoxy
00054f 940e 0928 	CALL SUBOPT_0x12
                 ; 0000 0164         }
                 ; 0000 0165         delay_ms(400);
000551 e9a0      	LDI  R26,LOW(400)
000552 e0b1      	LDI  R27,HIGH(400)
000553 940e 0984 	CALL _delay_ms
                 ; 0000 0166 
                 ; 0000 0167         /* Classic path: sector 1: block 4 (data) and block 7 (trailer) */
                 ; 0000 0168         if((sak&0xFC)==0x08 || (sak&0xFC)==0x18){
000555 2fe0      	MOV  R30,R16
000556 7fec      	ANDI R30,LOW(0xFC)
000557 30e8      	CPI  R30,LOW(0x8)
000558 f029      	BREQ _0x57
000559 2fe0      	MOV  R30,R16
00055a 7fec      	ANDI R30,LOW(0xFC)
00055b 31e8      	CPI  R30,LOW(0x18)
00055c f009      	BREQ _0x57
00055d c0ee      	RJMP _0x56
                 _0x57:
                 ; 0000 0169             if(uid_len==7){ uid4[0]=uid[3]; uid4[1]=uid[4]; uid4[2]=uid[5]; uid4[3]=uid[6]; }
00055e 3017      	CPI  R17,7
00055f f441      	BRNE _0x59
000560 a5ea      	LDD  R30,Y+42
000561 a3eb      	STD  Y+35,R30
000562 a5eb      	LDD  R30,Y+43
000563 a3ec      	STD  Y+36,R30
000564 a5ec      	LDD  R30,Y+44
000565 a3ed      	STD  Y+37,R30
000566 a5ed      	LDD  R30,Y+45
000567 c007      	RJMP _0x6A
                 ; 0000 016A             else          { uid4[0]=uid[0]; uid4[1]=uid[1]; uid4[2]=uid[2]; uid4[3]=uid[3]; }
                 _0x59:
000568 a1ef      	LDD  R30,Y+39
000569 a3eb      	STD  Y+35,R30
00056a a5e8      	LDD  R30,Y+40
00056b a3ec      	STD  Y+36,R30
00056c a5e9      	LDD  R30,Y+41
00056d a3ed      	STD  Y+37,R30
00056e a5ea      	LDD  R30,Y+42
                 _0x6A:
00056f a3ee      	STD  Y+38,R30
                 ; 0000 016B 
                 ; 0000 016C             /* Auth A for block 4 */
                 ; 0000 016D             if(!mifare_auth(MF_AUTH_KEY_A,4,uid4,DEF_KEY_A)){
000570 e6e0      	LDI  R30,LOW(96)
000571 93ea      	ST   -Y,R30
000572 e0e4      	LDI  R30,LOW(4)
000573 940e 0937 	CALL SUBOPT_0x15
000575 f431      	BRNE _0x5B
                 ; 0000 016E                 lcd_clear(); lcd_putsf("Auth-Read FAIL");
000576 d10c      	RCALL _lcd_clear
                +
000577 efab     +LDI R26 , LOW ( 2 * _0x0 + ( 71 ) )
000578 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW2FN _0x0,71
000579 940e 0942 	CALL SUBOPT_0x16
                 ; 0000 016F                 delay_ms(800);
                 ; 0000 0170                 mifare_stop_crypto();
                 ; 0000 0171                 continue;
00057b cf3e      	RJMP _0x4D
                 ; 0000 0172             }
                 ; 0000 0173             if(!mifare_read_block(4, blk4)){
                 _0x5B:
00057c e0e4      	LDI  R30,LOW(4)
00057d 93ea      	ST   -Y,R30
00057e 01de      	MOVW R26,R28
00057f 9654      	ADIW R26,20
000580 de70      	RCALL _mifare_read_block_G000
000581 30e0      	CPI  R30,0
000582 f431      	BRNE _0x5C
                 ; 0000 0174                 lcd_clear(); lcd_putsf("Read Error");
000583 d0ff      	RCALL _lcd_clear
                +
000584 e0aa     +LDI R26 , LOW ( 2 * _0x0 + ( 86 ) )
000585 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW2FN _0x0,86
000586 940e 0942 	CALL SUBOPT_0x16
                 ; 0000 0175                 delay_ms(800);
                 ; 0000 0176                 mifare_stop_crypto();
                 ; 0000 0177                 continue;
000588 cf31      	RJMP _0x4D
                 ; 0000 0178             }
                 ; 0000 0179             mifare_stop_crypto();
                 _0x5C:
000589 de5f      	RCALL _mifare_stop_crypto_G000
                 ; 0000 017A 
                 ; 0000 017B             lcd_clear(); lcd_putsf("B4:");
00058a d0f8      	RCALL _lcd_clear
                +
00058b e1a5     +LDI R26 , LOW ( 2 * _0x0 + ( 97 ) )
00058c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 97 ) )
                 	__POINTW2FN _0x0,97
00058d d125      	RCALL _lcd_putsf
                 ; 0000 017C             lcd_gotoxy(0,1);
00058e 940e 0923 	CALL SUBOPT_0x11
                 ; 0000 017D             for(i=0;i<8;i++){
000590 e0e0      	LDI  R30,LOW(0)
000591 83ea      	STD  Y+2,R30
                 _0x5E:
000592 81aa      	LDD  R26,Y+2
000593 30a8      	CPI  R26,LOW(0x8)
000594 f4c8      	BRSH _0x5F
                 ; 0000 017E                 sprintf(line,"%02X", blk4[i]);
000595 940e 0918 	CALL SUBOPT_0xF
                +
000597 eee1     +LDI R30 , LOW ( 2 * _0x0 + ( 45 ) )
000598 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 45 ) )
                 	__POINTW1FN _0x0,45
000599 93fa      	ST   -Y,R31
00059a 93ea      	ST   -Y,R30
00059b 81ee      	LDD  R30,Y+6
00059c e0f0      	LDI  R31,0
00059d 01de      	MOVW R26,R28
00059e 9657      	ADIW R26,23
00059f 0fae      	ADD  R26,R30
0005a0 1fbf      	ADC  R27,R31
0005a1 91ec      	LD   R30,X
0005a2 940e 091d 	CALL SUBOPT_0x10
0005a4 e084      	LDI  R24,4
0005a5 940e 0868 	CALL _sprintf
0005a7 9628      	ADIW R28,8
                 ; 0000 017F                 lcd_puts(line);
0005a8 940e 0928 	CALL SUBOPT_0x12
                 ; 0000 0180             }
0005aa 81ea      	LDD  R30,Y+2
0005ab 5fef      	SUBI R30,-LOW(1)
0005ac 83ea      	STD  Y+2,R30
0005ad cfe4      	RJMP _0x5E
                 _0x5F:
                 ; 0000 0181             delay_ms(1100);
0005ae e4ac      	LDI  R26,LOW(1100)
0005af e0b4      	LDI  R27,HIGH(1100)
0005b0 940e 0984 	CALL _delay_ms
                 ; 0000 0182 
                 ; 0000 0183             /* Re-select before trailer auth to avoid state issues */
                 ; 0000 0184             if(!rc522_reselect(uid, uid_len, &sak)){
0005b2 01fe      	MOVW R30,R28
0005b3 96b7      	ADIW R30,39
0005b4 93fa      	ST   -Y,R31
0005b5 93ea      	ST   -Y,R30
0005b6 931a      	ST   -Y,R17
0005b7 b7ad      	IN   R26,SPL
0005b8 b7be      	IN   R27,SPH
0005b9 930f      	PUSH R16
0005ba deb9      	RCALL _rc522_reselect_G000
0005bb 910f      	POP  R16
0005bc 30e0      	CPI  R30,0
0005bd f449      	BRNE _0x60
                 ; 0000 0185                 lcd_clear(); lcd_putsf("Re-select Fail");
0005be d0c4      	RCALL _lcd_clear
                +
0005bf e1a9     +LDI R26 , LOW ( 2 * _0x0 + ( 101 ) )
0005c0 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 101 ) )
                 	__POINTW2FN _0x0,101
0005c1 d0f1      	RCALL _lcd_putsf
                 ; 0000 0186                 delay_ms(700);
0005c2 ebac      	LDI  R26,LOW(700)
0005c3 e0b2      	LDI  R27,HIGH(700)
0005c4 940e 0984 	CALL _delay_ms
                 ; 0000 0187                 continue;
0005c6 cef3      	RJMP _0x4D
                 ; 0000 0188             }
                 ; 0000 0189 
                 ; 0000 018A             /* Try Trailer auth: first Key A, then Key B */
                 ; 0000 018B             if(!mifare_auth(MF_AUTH_KEY_A,7,uid4,DEF_KEY_A)){
                 _0x60:
0005c7 e6e0      	LDI  R30,LOW(96)
0005c8 93ea      	ST   -Y,R30
0005c9 e0e7      	LDI  R30,LOW(7)
0005ca 940e 0937 	CALL SUBOPT_0x15
0005cc f4b9      	BRNE _0x61
                 ; 0000 018C                 if(!mifare_auth(MF_AUTH_KEY_B,7,uid4,DEF_KEY_B)){
0005cd e6e1      	LDI  R30,LOW(97)
0005ce 93ea      	ST   -Y,R30
0005cf e0e7      	LDI  R30,LOW(7)
0005d0 93ea      	ST   -Y,R30
0005d1 01fe      	MOVW R30,R28
0005d2 96b5      	ADIW R30,37
0005d3 93fa      	ST   -Y,R31
0005d4 93ea      	ST   -Y,R30
0005d5 e6a6      	LDI  R26,LOW(_DEF_KEY_B_G000)
0005d6 e0b2      	LDI  R27,HIGH(_DEF_KEY_B_G000)
0005d7 ddd8      	RCALL _mifare_auth_G000
0005d8 30e0      	CPI  R30,0
0005d9 f451      	BRNE _0x62
                 ; 0000 018D                     lcd_clear(); lcd_putsf("Auth Trailer Fail");
0005da d0a8      	RCALL _lcd_clear
                +
0005db e2a8     +LDI R26 , LOW ( 2 * _0x0 + ( 116 ) )
0005dc e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 116 ) )
                 	__POINTW2FN _0x0,116
0005dd d0d5      	RCALL _lcd_putsf
                 ; 0000 018E                     delay_ms(1000);
0005de eea8      	LDI  R26,LOW(1000)
0005df e0b3      	LDI  R27,HIGH(1000)
0005e0 940e 0984 	CALL _delay_ms
                 ; 0000 018F                     mifare_stop_crypto();
0005e2 de06      	RCALL _mifare_stop_crypto_G000
                 ; 0000 0190                     continue;
0005e3 ced6      	RJMP _0x4D
                 ; 0000 0191                 }
                 ; 0000 0192             }
                 _0x62:
                 ; 0000 0193 
                 ; 0000 0194             if(!mifare_read_block(7, trailer)){
                 _0x61:
0005e4 e0e7      	LDI  R30,LOW(7)
0005e5 93ea      	ST   -Y,R30
0005e6 01de      	MOVW R26,R28
0005e7 9614      	ADIW R26,4
0005e8 de08      	RCALL _mifare_read_block_G000
0005e9 30e0      	CPI  R30,0
0005ea f451      	BRNE _0x63
                 ; 0000 0195                 lcd_clear(); lcd_putsf("Trailer ReadErr");
0005eb d097      	RCALL _lcd_clear
                +
0005ec e3aa     +LDI R26 , LOW ( 2 * _0x0 + ( 134 ) )
0005ed e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 134 ) )
                 	__POINTW2FN _0x0,134
0005ee d0c4      	RCALL _lcd_putsf
                 ; 0000 0196                 delay_ms(900);
0005ef e8a4      	LDI  R26,LOW(900)
0005f0 e0b3      	LDI  R27,HIGH(900)
0005f1 940e 0984 	CALL _delay_ms
                 ; 0000 0197                 mifare_stop_crypto();
0005f3 ddf5      	RCALL _mifare_stop_crypto_G000
                 ; 0000 0198                 continue;
0005f4 cec5      	RJMP _0x4D
                 ; 0000 0199             }
                 ; 0000 019A             mifare_stop_crypto();
                 _0x63:
0005f5 ddf3      	RCALL _mifare_stop_crypto_G000
                 ; 0000 019B 
                 ; 0000 019C             get_c_bits_for_block(trailer, 0, &c1, &c2, &c3);
0005f6 01fe      	MOVW R30,R28
0005f7 9633      	ADIW R30,3
0005f8 93fa      	ST   -Y,R31
0005f9 93ea      	ST   -Y,R30
0005fa e0e0      	LDI  R30,LOW(0)
0005fb 93ea      	ST   -Y,R30
0005fc b7ed      	IN   R30,SPL
0005fd b7fe      	IN   R31,SPH
0005fe 93fa      	ST   -Y,R31
0005ff 93ea      	ST   -Y,R30
000600 933f      	PUSH R19
000601 b7ed      	IN   R30,SPL
000602 b7fe      	IN   R31,SPH
000603 93fa      	ST   -Y,R31
000604 93ea      	ST   -Y,R30
000605 932f      	PUSH R18
000606 b7ad      	IN   R26,SPL
000607 b7be      	IN   R27,SPH
000608 935f      	PUSH R21
000609 de23      	RCALL _get_c_bits_for_block_G000
00060a 915f      	POP  R21
00060b 912f      	POP  R18
00060c 913f      	POP  R19
                 ; 0000 019D             is_ro = data_block_is_readonly(c1,c2,c3);
00060d 933a      	ST   -Y,R19
00060e 932a      	ST   -Y,R18
00060f 2fa5      	MOV  R26,R21
000610 de49      	RCALL _data_block_is_readonly_G000
000611 2f4e      	MOV  R20,R30
                 ; 0000 019E 
                 ; 0000 019F             lcd_clear();
000612 d070      	RCALL _lcd_clear
                 ; 0000 01A0             lcd_putsf("RO:");
                +
000613 e4aa     +LDI R26 , LOW ( 2 * _0x0 + ( 150 ) )
000614 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 150 ) )
                 	__POINTW2FN _0x0,150
000615 d09d      	RCALL _lcd_putsf
                 ; 0000 01A1             if(is_ro) lcd_putsf("YES ");
000616 3040      	CPI  R20,0
000617 f019      	BREQ _0x64
                +
000618 e4ae     +LDI R26 , LOW ( 2 * _0x0 + ( 154 ) )
000619 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 154 ) )
                 	__POINTW2FN _0x0,154
00061a c002      	RJMP _0x6B
                 ; 0000 01A2             else      lcd_putsf("NO  ");
                 _0x64:
                +
00061b e5a3     +LDI R26 , LOW ( 2 * _0x0 + ( 159 ) )
00061c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW2FN _0x0,159
                 _0x6B:
00061d d095      	RCALL _lcd_putsf
                 ; 0000 01A3             sprintf(line,"C:%d%d%d", c1,c2,c3);
00061e 940e 0918 	CALL SUBOPT_0xF
                +
000620 e5e8     +LDI R30 , LOW ( 2 * _0x0 + ( 164 ) )
000621 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 164 ) )
                 	__POINTW1FN _0x0,164
000622 93fa      	ST   -Y,R31
000623 93ea      	ST   -Y,R30
000624 2fe3      	MOV  R30,R19
000625 940e 091d 	CALL SUBOPT_0x10
000627 2fe2      	MOV  R30,R18
000628 940e 091d 	CALL SUBOPT_0x10
00062a 2fe5      	MOV  R30,R21
00062b 940e 091d 	CALL SUBOPT_0x10
00062d 940e 0932 	CALL SUBOPT_0x14
                 ; 0000 01A4             lcd_gotoxy(8,0); lcd_puts(line);
00062f e0e8      	LDI  R30,LOW(8)
000630 940e 0914 	CALL SUBOPT_0xE
000632 940e 0928 	CALL SUBOPT_0x12
                 ; 0000 01A5             lcd_gotoxy(0,1);
000634 940e 0923 	CALL SUBOPT_0x11
                 ; 0000 01A6             sprintf(line,"ACC:%02X%02X%02X", trailer[6],trailer[7],trailer[8]);
000636 940e 0918 	CALL SUBOPT_0xF
                +
000638 e6e1     +LDI R30 , LOW ( 2 * _0x0 + ( 173 ) )
000639 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 173 ) )
                 	__POINTW1FN _0x0,173
00063a 93fa      	ST   -Y,R31
00063b 93ea      	ST   -Y,R30
00063c 85ed      	LDD  R30,Y+13
00063d 940e 091d 	CALL SUBOPT_0x10
00063f 89ea      	LDD  R30,Y+18
000640 940e 091d 	CALL SUBOPT_0x10
000642 89ef      	LDD  R30,Y+23
000643 940e 091d 	CALL SUBOPT_0x10
000645 940e 0932 	CALL SUBOPT_0x14
                 ; 0000 01A7             lcd_puts(line);
000647 940e 0928 	CALL SUBOPT_0x12
                 ; 0000 01A8             delay_ms(1400);
000649 e7a8      	LDI  R26,LOW(1400)
00064a e0b5      	LDI  R27,HIGH(1400)
00064b c006      	RJMP _0x6C
                 ; 0000 01A9         } else {
                 _0x56:
                 ; 0000 01AA             lcd_clear(); lcd_putsf("RO:N/A (Type2)");
00064c d036      	RCALL _lcd_clear
                +
00064d e7a2     +LDI R26 , LOW ( 2 * _0x0 + ( 190 ) )
00064e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 190 ) )
                 	__POINTW2FN _0x0,190
00064f d063      	RCALL _lcd_putsf
                 ; 0000 01AB             delay_ms(800);
000650 e2a0      	LDI  R26,LOW(800)
000651 e0b3      	LDI  R27,HIGH(800)
                 _0x6C:
000652 940e 0984 	CALL _delay_ms
                 ; 0000 01AC         }
                 ; 0000 01AD     }
000654 ce65      	RJMP _0x4D
                 ; 0000 01AE }
                 _0x67:
000655 cfff      	RJMP _0x67
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000656 93aa      	ST   -Y,R26
000657 b3e5      	IN   R30,0x15
000658 70ef      	ANDI R30,LOW(0xF)
000659 2fae      	MOV  R26,R30
00065a 81e8      	LD   R30,Y
00065b 7fe0      	ANDI R30,LOW(0xF0)
00065c 2bea      	OR   R30,R26
00065d bbe5      	OUT  0x15,R30
                +
00065e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00065f 958a     +DEC R24
000660 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000661 9aaa      	SBI  0x15,2
                +
000662 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000663 958a     +DEC R24
000664 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000665 98aa      	CBI  0x15,2
                +
000666 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000667 958a     +DEC R24
000668 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000669 c088      	RJMP _0x20A0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00066a 93aa      	ST   -Y,R26
00066b 81a8      	LD   R26,Y
00066c dfe9      	RCALL __lcd_write_nibble_G100
00066d 81e8          ld    r30,y
00066e 95e2          swap  r30
00066f 83e8          st    y,r30
000670 81a8      	LD   R26,Y
000671 dfe4      	RCALL __lcd_write_nibble_G100
                +
000672 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000673 958a     +DEC R24
000674 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000675 c07c      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000676 93aa      	ST   -Y,R26
000677 81e8      	LD   R30,Y
000678 e0f0      	LDI  R31,0
000679 59e4      	SUBI R30,LOW(-__base_y_G100)
00067a 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00067b 81e0      	LD   R30,Z
00067c 81a9      	LDD  R26,Y+1
00067d 0fae      	ADD  R26,R30
00067e dfeb      	RCALL __lcd_write_data
00067f 8059      	LDD  R5,Y+1
000680 8048      	LDD  R4,Y+0
                 _0x20A0004:
000681 9622      	ADIW R28,2
000682 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000683 e0a2      	LDI  R26,LOW(2)
000684 940e 094a 	CALL SUBOPT_0x17
000686 e0ac      	LDI  R26,LOW(12)
000687 dfe2      	RCALL __lcd_write_data
000688 e0a1      	LDI  R26,LOW(1)
000689 940e 094a 	CALL SUBOPT_0x17
00068b e0e0      	LDI  R30,LOW(0)
00068c 2e4e      	MOV  R4,R30
00068d 2e5e      	MOV  R5,R30
00068e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00068f 93aa      	ST   -Y,R26
000690 81a8      	LD   R26,Y
000691 30aa      	CPI  R26,LOW(0xA)
000692 f011      	BREQ _0x2000005
000693 1457      	CP   R5,R7
000694 f048      	BRLO _0x2000004
                 _0x2000005:
000695 e0e0      	LDI  R30,LOW(0)
000696 93ea      	ST   -Y,R30
000697 9443      	INC  R4
000698 2da4      	MOV  R26,R4
000699 dfdc      	RCALL _lcd_gotoxy
00069a 81a8      	LD   R26,Y
00069b 30aa      	CPI  R26,LOW(0xA)
00069c f409      	BRNE _0x2000007
00069d c054      	RJMP _0x20A0002
                 _0x2000007:
                 _0x2000004:
00069e 9453      	INC  R5
00069f 9aa8      	SBI  0x15,0
0006a0 81a8      	LD   R26,Y
0006a1 dfc8      	RCALL __lcd_write_data
0006a2 98a8      	CBI  0x15,0
0006a3 c04e      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0006a4 93ba      	ST   -Y,R27
0006a5 93aa      	ST   -Y,R26
0006a6 931a      	ST   -Y,R17
                 _0x2000008:
0006a7 81a9      	LDD  R26,Y+1
0006a8 81ba      	LDD  R27,Y+1+1
0006a9 91ed      	LD   R30,X+
0006aa 83a9      	STD  Y+1,R26
0006ab 83ba      	STD  Y+1+1,R27
0006ac 2f1e      	MOV  R17,R30
0006ad 30e0      	CPI  R30,0
0006ae f019      	BREQ _0x200000A
0006af 2fa1      	MOV  R26,R17
0006b0 dfde      	RCALL _lcd_putchar
0006b1 cff5      	RJMP _0x2000008
                 _0x200000A:
0006b2 c009      	RJMP _0x20A0003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0006b3 93ba      	ST   -Y,R27
0006b4 93aa      	ST   -Y,R26
0006b5 931a      	ST   -Y,R17
                 _0x200000B:
0006b6 940e 090a 	CALL SUBOPT_0xD
0006b8 f019      	BREQ _0x200000D
0006b9 2fa1      	MOV  R26,R17
0006ba dfd4      	RCALL _lcd_putchar
0006bb cffa      	RJMP _0x200000B
                 _0x200000D:
                 _0x20A0003:
0006bc 8118      	LDD  R17,Y+0
0006bd 9623      	ADIW R28,3
0006be 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006bf 93aa      	ST   -Y,R26
0006c0 b3e4      	IN   R30,0x14
0006c1 6fe0      	ORI  R30,LOW(0xF0)
0006c2 bbe4      	OUT  0x14,R30
0006c3 9aa2      	SBI  0x14,2
0006c4 9aa0      	SBI  0x14,0
0006c5 9aa1      	SBI  0x14,1
0006c6 98aa      	CBI  0x15,2
0006c7 98a8      	CBI  0x15,0
0006c8 98a9      	CBI  0x15,1
0006c9 8078      	LDD  R7,Y+0
0006ca 81e8      	LD   R30,Y
0006cb 58e0      	SUBI R30,-LOW(128)
                +
0006cc 93e0 026e+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0006ce 81e8      	LD   R30,Y
0006cf 54e0      	SUBI R30,-LOW(192)
                +
0006d0 93e0 026f+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0006d2 e1a4      	LDI  R26,LOW(20)
0006d3 e0b0      	LDI  R27,0
0006d4 940e 0984 	CALL _delay_ms
0006d6 940e 0950 	CALL SUBOPT_0x18
0006d8 940e 0950 	CALL SUBOPT_0x18
0006da 940e 0950 	CALL SUBOPT_0x18
0006dc e2a0      	LDI  R26,LOW(32)
0006dd df78      	RCALL __lcd_write_nibble_G100
                +
0006de ec88     +LDI R24 , LOW ( 200 )
0006df e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006e0 9701     +SBIW R24 , 1
0006e1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006e2 e2a8      	LDI  R26,LOW(40)
0006e3 df86      	RCALL __lcd_write_data
0006e4 e0a4      	LDI  R26,LOW(4)
0006e5 df84      	RCALL __lcd_write_data
0006e6 e8a5      	LDI  R26,LOW(133)
0006e7 df82      	RCALL __lcd_write_data
0006e8 e0a6      	LDI  R26,LOW(6)
0006e9 df80      	RCALL __lcd_write_data
0006ea df98      	RCALL _lcd_clear
0006eb c006      	RJMP _0x20A0002
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
                 ; .FSTART _spi
0006ec 93aa      	ST   -Y,R26
0006ed 81e8      	LD   R30,Y
0006ee b9ef      	OUT  0xF,R30
                 _0x2020003:
0006ef 9b77      	SBIS 0xE,7
0006f0 cffe      	RJMP _0x2020003
0006f1 b1ef      	IN   R30,0xF
                 _0x20A0002:
0006f2 9621      	ADIW R28,1
0006f3 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
0006f4 93ba      	ST   -Y,R27
0006f5 93aa      	ST   -Y,R26
0006f6 931a      	ST   -Y,R17
0006f7 930a      	ST   -Y,R16
0006f8 81aa      	LDD  R26,Y+2
0006f9 81bb      	LDD  R27,Y+2+1
0006fa 9612      	ADIW R26,2
0006fb 940e 099e 	CALL __GETW1P
0006fd 9730      	SBIW R30,0
0006fe f159      	BREQ _0x2040010
0006ff 81aa      	LDD  R26,Y+2
000700 81bb      	LDD  R27,Y+2+1
000701 9614      	ADIW R26,4
000702 940e 099e 	CALL __GETW1P
000704 018f      	MOVW R16,R30
000705 9730      	SBIW R30,0
000706 f061      	BREQ _0x2040012
                +
000707 3002     +CPI R16 , LOW ( 2 )
000708 e0e0     +LDI R30 , HIGH ( 2 )
000709 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00070a f098      	BRLO _0x2040013
00070b 01f8      	MOVW R30,R16
00070c 9731      	SBIW R30,1
00070d 018f      	MOVW R16,R30
                +
00070e 81aa     +LDD R26 , Y + 2
00070f 81bb     +LDD R27 , Y + 2 + 1
000710 9614     +ADIW R26 , 4
000711 93ed     +ST X + , R30
000712 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
000713 81aa      	LDD  R26,Y+2
000714 81bb      	LDD  R27,Y+2+1
000715 9612      	ADIW R26,2
000716 91ed      	LD   R30,X+
000717 91fd      	LD   R31,X+
000718 9631      	ADIW R30,1
000719 93fe      	ST   -X,R31
00071a 93ee      	ST   -X,R30
00071b 9731      	SBIW R30,1
00071c 81ac      	LDD  R26,Y+4
00071d 83a0      	STD  Z+0,R26
                 _0x2040013:
00071e 81aa      	LDD  R26,Y+2
00071f 81bb      	LDD  R27,Y+2+1
000720 940e 099e 	CALL __GETW1P
000722 23ff      	TST  R31
000723 f02a      	BRMI _0x2040014
000724 91ed      	LD   R30,X+
000725 91fd      	LD   R31,X+
000726 9631      	ADIW R30,1
000727 93fe      	ST   -X,R31
000728 93ee      	ST   -X,R30
                 _0x2040014:
000729 c006      	RJMP _0x2040015
                 _0x2040010:
00072a 81aa      	LDD  R26,Y+2
00072b 81bb      	LDD  R27,Y+2+1
00072c efef      	LDI  R30,LOW(65535)
00072d efff      	LDI  R31,HIGH(65535)
00072e 93ed      	ST   X+,R30
00072f 93fc      	ST   X,R31
                 _0x2040015:
000730 8119      	LDD  R17,Y+1
000731 8108      	LDD  R16,Y+0
000732 9625      	ADIW R28,5
000733 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
000734 93ba      	ST   -Y,R27
000735 93aa      	ST   -Y,R26
000736 9726      	SBIW R28,6
000737 940e 09ab 	CALL __SAVELOCR6
000739 e010      	LDI  R17,0
00073a 85ac      	LDD  R26,Y+12
00073b 85bd      	LDD  R27,Y+12+1
00073c e0e0      	LDI  R30,LOW(0)
00073d e0f0      	LDI  R31,HIGH(0)
00073e 93ed      	ST   X+,R30
00073f 93fc      	ST   X,R31
                 _0x2040016:
000740 89ea      	LDD  R30,Y+18
000741 89fb      	LDD  R31,Y+18+1
000742 9631      	ADIW R30,1
000743 8bea      	STD  Y+18,R30
000744 8bfb      	STD  Y+18+1,R31
000745 9731      	SBIW R30,1
000746 91e4      	LPM  R30,Z
000747 2f2e      	MOV  R18,R30
000748 30e0      	CPI  R30,0
000749 f409      	BRNE PC+2
00074a c115      	RJMP _0x2040018
00074b 2fe1      	MOV  R30,R17
00074c 30e0      	CPI  R30,0
00074d f439      	BRNE _0x204001C
00074e 3225      	CPI  R18,37
00074f f411      	BRNE _0x204001D
000750 e011      	LDI  R17,LOW(1)
000751 c002      	RJMP _0x204001E
                 _0x204001D:
000752 940e 0958 	CALL SUBOPT_0x19
                 _0x204001E:
000754 c10a      	RJMP _0x204001B
                 _0x204001C:
000755 30e1      	CPI  R30,LOW(0x1)
000756 f4a9      	BRNE _0x204001F
000757 3225      	CPI  R18,37
000758 f419      	BRNE _0x2040020
000759 940e 0958 	CALL SUBOPT_0x19
00075b c102      	RJMP _0x20400CC
                 _0x2040020:
00075c e012      	LDI  R17,LOW(2)
00075d e040      	LDI  R20,LOW(0)
00075e e000      	LDI  R16,LOW(0)
00075f 322d      	CPI  R18,45
000760 f411      	BRNE _0x2040021
000761 e001      	LDI  R16,LOW(1)
000762 c0fc      	RJMP _0x204001B
                 _0x2040021:
000763 322b      	CPI  R18,43
000764 f411      	BRNE _0x2040022
000765 e24b      	LDI  R20,LOW(43)
000766 c0f8      	RJMP _0x204001B
                 _0x2040022:
000767 3220      	CPI  R18,32
000768 f411      	BRNE _0x2040023
000769 e240      	LDI  R20,LOW(32)
00076a c0f4      	RJMP _0x204001B
                 _0x2040023:
00076b c002      	RJMP _0x2040024
                 _0x204001F:
00076c 30e2      	CPI  R30,LOW(0x2)
00076d f439      	BRNE _0x2040025
                 _0x2040024:
00076e e050      	LDI  R21,LOW(0)
00076f e013      	LDI  R17,LOW(3)
000770 3320      	CPI  R18,48
000771 f411      	BRNE _0x2040026
000772 6800      	ORI  R16,LOW(128)
000773 c0eb      	RJMP _0x204001B
                 _0x2040026:
000774 c003      	RJMP _0x2040027
                 _0x2040025:
000775 30e3      	CPI  R30,LOW(0x3)
000776 f009      	BREQ PC+2
000777 c0e7      	RJMP _0x204001B
                 _0x2040027:
000778 3320      	CPI  R18,48
000779 f010      	BRLO _0x204002A
00077a 332a      	CPI  R18,58
00077b f008      	BRLO _0x204002B
                 _0x204002A:
00077c c007      	RJMP _0x2040029
                 _0x204002B:
00077d e0aa      	LDI  R26,LOW(10)
00077e 9f5a      	MUL  R21,R26
00077f 2d50      	MOV  R21,R0
000780 2fe2      	MOV  R30,R18
000781 53e0      	SUBI R30,LOW(48)
000782 0f5e      	ADD  R21,R30
000783 c0db      	RJMP _0x204001B
                 _0x2040029:
000784 2fe2      	MOV  R30,R18
000785 36e3      	CPI  R30,LOW(0x63)
000786 f449      	BRNE _0x204002F
000787 940e 095f 	CALL SUBOPT_0x1A
000789 89e8      	LDD  R30,Y+16
00078a 89f9      	LDD  R31,Y+16+1
00078b 81a4      	LDD  R26,Z+4
00078c 93aa      	ST   -Y,R26
00078d 940e 0965 	CALL SUBOPT_0x1B
00078f c0ce      	RJMP _0x2040030
                 _0x204002F:
000790 37e3      	CPI  R30,LOW(0x73)
000791 f441      	BRNE _0x2040032
000792 940e 095f 	CALL SUBOPT_0x1A
000794 940e 096b 	CALL SUBOPT_0x1C
000796 940e 089c 	CALL _strlen
000798 2f1e      	MOV  R17,R30
000799 c00a      	RJMP _0x2040033
                 _0x2040032:
00079a 37e0      	CPI  R30,LOW(0x70)
00079b f461      	BRNE _0x2040035
00079c 940e 095f 	CALL SUBOPT_0x1A
00079e 940e 096b 	CALL SUBOPT_0x1C
0007a0 940e 08a8 	CALL _strlenf
0007a2 2f1e      	MOV  R17,R30
0007a3 6008      	ORI  R16,LOW(8)
                 _0x2040033:
0007a4 6002      	ORI  R16,LOW(2)
0007a5 770f      	ANDI R16,LOW(127)
0007a6 e030      	LDI  R19,LOW(0)
0007a7 c034      	RJMP _0x2040036
                 _0x2040035:
0007a8 36e4      	CPI  R30,LOW(0x64)
0007a9 f011      	BREQ _0x2040039
0007aa 36e9      	CPI  R30,LOW(0x69)
0007ab f411      	BRNE _0x204003A
                 _0x2040039:
0007ac 6004      	ORI  R16,LOW(4)
0007ad c002      	RJMP _0x204003B
                 _0x204003A:
0007ae 37e5      	CPI  R30,LOW(0x75)
0007af f431      	BRNE _0x204003C
                 _0x204003B:
0007b0 e9e6      	LDI  R30,LOW(_tbl10_G102*2)
0007b1 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
0007b2 83ee      	STD  Y+6,R30
0007b3 83ff      	STD  Y+6+1,R31
0007b4 e015      	LDI  R17,LOW(5)
0007b5 c00c      	RJMP _0x204003D
                 _0x204003C:
0007b6 35e8      	CPI  R30,LOW(0x58)
0007b7 f411      	BRNE _0x204003F
0007b8 6008      	ORI  R16,LOW(8)
0007b9 c003      	RJMP _0x2040040
                 _0x204003F:
0007ba 37e8      	CPI  R30,LOW(0x78)
0007bb f009      	BREQ PC+2
0007bc c0a1      	RJMP _0x2040071
                 _0x2040040:
0007bd eae0      	LDI  R30,LOW(_tbl16_G102*2)
0007be e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
0007bf 83ee      	STD  Y+6,R30
0007c0 83ff      	STD  Y+6+1,R31
0007c1 e014      	LDI  R17,LOW(4)
                 _0x204003D:
0007c2 ff02      	SBRS R16,2
0007c3 c014      	RJMP _0x2040042
0007c4 940e 095f 	CALL SUBOPT_0x1A
0007c6 940e 0975 	CALL SUBOPT_0x1D
0007c8 85ab      	LDD  R26,Y+11
0007c9 23aa      	TST  R26
0007ca f43a      	BRPL _0x2040043
0007cb 85ea      	LDD  R30,Y+10
0007cc 85fb      	LDD  R31,Y+10+1
0007cd 940e 0992 	CALL __ANEGW1
0007cf 87ea      	STD  Y+10,R30
0007d0 87fb      	STD  Y+10+1,R31
0007d1 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
0007d2 3040      	CPI  R20,0
0007d3 f011      	BREQ _0x2040044
0007d4 5f1f      	SUBI R17,-LOW(1)
0007d5 c001      	RJMP _0x2040045
                 _0x2040044:
0007d6 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
0007d7 c004      	RJMP _0x2040046
                 _0x2040042:
0007d8 940e 095f 	CALL SUBOPT_0x1A
0007da 940e 0975 	CALL SUBOPT_0x1D
                 _0x2040046:
                 _0x2040036:
0007dc fd00      	SBRC R16,0
0007dd c011      	RJMP _0x2040047
                 _0x2040048:
0007de 1715      	CP   R17,R21
0007df f478      	BRSH _0x204004A
0007e0 ff07      	SBRS R16,7
0007e1 c008      	RJMP _0x204004B
0007e2 ff02      	SBRS R16,2
0007e3 c004      	RJMP _0x204004C
0007e4 7f0b      	ANDI R16,LOW(251)
0007e5 2f24      	MOV  R18,R20
0007e6 5011      	SUBI R17,LOW(1)
0007e7 c001      	RJMP _0x204004D
                 _0x204004C:
0007e8 e320      	LDI  R18,LOW(48)
                 _0x204004D:
0007e9 c001      	RJMP _0x204004E
                 _0x204004B:
0007ea e220      	LDI  R18,LOW(32)
                 _0x204004E:
0007eb 940e 0958 	CALL SUBOPT_0x19
0007ed 5051      	SUBI R21,LOW(1)
0007ee cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0007ef 2f31      	MOV  R19,R17
0007f0 ff01      	SBRS R16,1
0007f1 c017      	RJMP _0x204004F
                 _0x2040050:
0007f2 3030      	CPI  R19,0
0007f3 f0a1      	BREQ _0x2040052
0007f4 ff03      	SBRS R16,3
0007f5 c006      	RJMP _0x2040053
0007f6 81ee      	LDD  R30,Y+6
0007f7 81ff      	LDD  R31,Y+6+1
0007f8 9125      	LPM  R18,Z+
0007f9 83ee      	STD  Y+6,R30
0007fa 83ff      	STD  Y+6+1,R31
0007fb c005      	RJMP _0x2040054
                 _0x2040053:
0007fc 81ae      	LDD  R26,Y+6
0007fd 81bf      	LDD  R27,Y+6+1
0007fe 912d      	LD   R18,X+
0007ff 83ae      	STD  Y+6,R26
000800 83bf      	STD  Y+6+1,R27
                 _0x2040054:
000801 940e 0958 	CALL SUBOPT_0x19
000803 3050      	CPI  R21,0
000804 f009      	BREQ _0x2040055
000805 5051      	SUBI R21,LOW(1)
                 _0x2040055:
000806 5031      	SUBI R19,LOW(1)
000807 cfea      	RJMP _0x2040050
                 _0x2040052:
000808 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
000809 e320      	LDI  R18,LOW(48)
00080a 81ee      	LDD  R30,Y+6
00080b 81ff      	LDD  R31,Y+6+1
00080c 940e 09a2 	CALL __GETW1PF
00080e 87e8      	STD  Y+8,R30
00080f 87f9      	STD  Y+8+1,R31
000810 81ee      	LDD  R30,Y+6
000811 81ff      	LDD  R31,Y+6+1
000812 9632      	ADIW R30,2
000813 83ee      	STD  Y+6,R30
000814 83ff      	STD  Y+6+1,R31
                 _0x204005A:
000815 85e8      	LDD  R30,Y+8
000816 85f9      	LDD  R31,Y+8+1
000817 85aa      	LDD  R26,Y+10
000818 85bb      	LDD  R27,Y+10+1
000819 17ae      	CP   R26,R30
00081a 07bf      	CPC  R27,R31
00081b f050      	BRLO _0x204005C
00081c 5f2f      	SUBI R18,-LOW(1)
00081d 85a8      	LDD  R26,Y+8
00081e 85b9      	LDD  R27,Y+8+1
00081f 85ea      	LDD  R30,Y+10
000820 85fb      	LDD  R31,Y+10+1
000821 1bea      	SUB  R30,R26
000822 0bfb      	SBC  R31,R27
000823 87ea      	STD  Y+10,R30
000824 87fb      	STD  Y+10+1,R31
000825 cfef      	RJMP _0x204005A
                 _0x204005C:
000826 332a      	CPI  R18,58
000827 f028      	BRLO _0x204005D
000828 ff03      	SBRS R16,3
000829 c002      	RJMP _0x204005E
00082a 5f29      	SUBI R18,-LOW(7)
00082b c001      	RJMP _0x204005F
                 _0x204005E:
00082c 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
00082d fd04      	SBRC R16,4
00082e c01a      	RJMP _0x2040061
00082f 3321      	CPI  R18,49
000830 f420      	BRSH _0x2040063
000831 85a8      	LDD  R26,Y+8
000832 85b9      	LDD  R27,Y+8+1
000833 9711      	SBIW R26,1
000834 f409      	BRNE _0x2040062
                 _0x2040063:
000835 c009      	RJMP _0x20400CD
                 _0x2040062:
000836 1753      	CP   R21,R19
000837 f010      	BRLO _0x2040067
000838 ff00      	SBRS R16,0
000839 c001      	RJMP _0x2040068
                 _0x2040067:
00083a c013      	RJMP _0x2040066
                 _0x2040068:
00083b e220      	LDI  R18,LOW(32)
00083c ff07      	SBRS R16,7
00083d c00b      	RJMP _0x2040069
00083e e320      	LDI  R18,LOW(48)
                 _0x20400CD:
00083f 6100      	ORI  R16,LOW(16)
000840 ff02      	SBRS R16,2
000841 c007      	RJMP _0x204006A
000842 7f0b      	ANDI R16,LOW(251)
000843 934a      	ST   -Y,R20
000844 940e 0965 	CALL SUBOPT_0x1B
000846 3050      	CPI  R21,0
000847 f009      	BREQ _0x204006B
000848 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000849 940e 0958 	CALL SUBOPT_0x19
00084b 3050      	CPI  R21,0
00084c f009      	BREQ _0x204006C
00084d 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
00084e 5031      	SUBI R19,LOW(1)
00084f 85a8      	LDD  R26,Y+8
000850 85b9      	LDD  R27,Y+8+1
000851 9712      	SBIW R26,2
000852 f008      	BRLO _0x2040059
000853 cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000854 ff00      	SBRS R16,0
000855 c008      	RJMP _0x204006D
                 _0x204006E:
000856 3050      	CPI  R21,0
000857 f031      	BREQ _0x2040070
000858 5051      	SUBI R21,LOW(1)
000859 e2e0      	LDI  R30,LOW(32)
00085a 93ea      	ST   -Y,R30
00085b 940e 0965 	CALL SUBOPT_0x1B
00085d cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
00085e e010      	LDI  R17,LOW(0)
                 _0x204001B:
00085f cee0      	RJMP _0x2040016
                 _0x2040018:
000860 85ac      	LDD  R26,Y+12
000861 85bd      	LDD  R27,Y+12+1
000862 940e 099e 	CALL __GETW1P
000864 940e 09b2 	CALL __LOADLOCR6
000866 9664      	ADIW R28,20
000867 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000868 92ff      	PUSH R15
000869 2ef8      	MOV  R15,R24
00086a 9726      	SBIW R28,6
00086b 940e 09ad 	CALL __SAVELOCR4
00086d 940e 097d 	CALL SUBOPT_0x1E
00086f 9730      	SBIW R30,0
000870 f419      	BRNE _0x2040072
000871 efef      	LDI  R30,LOW(65535)
000872 efff      	LDI  R31,HIGH(65535)
000873 c023      	RJMP _0x20A0001
                 _0x2040072:
000874 01de      	MOVW R26,R28
000875 9616      	ADIW R26,6
000876 940e 098e 	CALL __ADDW2R15
000878 018d      	MOVW R16,R26
000879 940e 097d 	CALL SUBOPT_0x1E
00087b 83ee      	STD  Y+6,R30
00087c 83ff      	STD  Y+6+1,R31
00087d e0e0      	LDI  R30,LOW(0)
00087e 87e8      	STD  Y+8,R30
00087f 87e9      	STD  Y+8+1,R30
000880 01de      	MOVW R26,R28
000881 961a      	ADIW R26,10
000882 940e 098e 	CALL __ADDW2R15
000884 940e 099e 	CALL __GETW1P
000886 93fa      	ST   -Y,R31
000887 93ea      	ST   -Y,R30
000888 931a      	ST   -Y,R17
000889 930a      	ST   -Y,R16
00088a efe4      	LDI  R30,LOW(_put_buff_G102)
00088b e0f6      	LDI  R31,HIGH(_put_buff_G102)
00088c 93fa      	ST   -Y,R31
00088d 93ea      	ST   -Y,R30
00088e 01de      	MOVW R26,R28
00088f 961a      	ADIW R26,10
000890 dea3      	RCALL __print_G102
000891 019f      	MOVW R18,R30
000892 81ae      	LDD  R26,Y+6
000893 81bf      	LDD  R27,Y+6+1
000894 e0e0      	LDI  R30,LOW(0)
000895 93ec      	ST   X,R30
000896 01f9      	MOVW R30,R18
                 _0x20A0001:
000897 940e 09b4 	CALL __LOADLOCR4
000899 962a      	ADIW R28,10
00089a 90ff      	POP  R15
00089b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00089c 93ba      	ST   -Y,R27
00089d 93aa      	ST   -Y,R26
00089e 91a9          ld   r26,y+
00089f 91b9          ld   r27,y+
0008a0 27ee          clr  r30
0008a1 27ff          clr  r31
                 strlen0:
0008a2 916d          ld   r22,x+
0008a3 2366          tst  r22
0008a4 f011          breq strlen1
0008a5 9631          adiw r30,1
0008a6 cffb          rjmp strlen0
                 strlen1:
0008a7 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0008a8 93ba      	ST   -Y,R27
0008a9 93aa      	ST   -Y,R26
0008aa 27aa          clr  r26
0008ab 27bb          clr  r27
0008ac 91e9          ld   r30,y+
0008ad 91f9          ld   r31,y+
                 strlenf0:
0008ae 9005      	lpm  r0,z+
0008af 2000          tst  r0
0008b0 f011          breq strlenf1
0008b1 9611          adiw r26,1
0008b2 cffb          rjmp strlenf0
                 strlenf1:
0008b3 01fd          movw r30,r26
0008b4 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _DEF_KEY_A_G000:
000260           	.BYTE 0x6
                 _DEF_KEY_B_G000:
000266           	.BYTE 0x6
                 __base_y_G100:
00026c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0008b5 93aa      	ST   -Y,R26
0008b6 81e9      	LDD  R30,Y+1
0008b7 93ea      	ST   -Y,R30
0008b8 81aa      	LDD  R26,Y+2
0008b9 940c 010b 	JMP  _rc522_read_G000
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
0008bb 93ea      	ST   -Y,R30
0008bc e0a0      	LDI  R26,LOW(0)
0008bd 940c 00fd 	JMP  _rc522_write_G000
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0008bf 93ba      	ST   -Y,R27
0008c0 93aa      	ST   -Y,R26
0008c1 931a      	ST   -Y,R17
0008c2 e0e1      	LDI  R30,LOW(1)
0008c3 cff7      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0008c4 e0ea      	LDI  R30,LOW(10)
0008c5 93ea      	ST   -Y,R30
0008c6 e8a0      	LDI  R26,LOW(128)
0008c7 940c 011e 	JMP  _set_bit_mask_G000
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0008c9 27ee      	CLR  R30
0008ca 0fa1      	ADD  R26,R17
0008cb 1fbe      	ADC  R27,R30
0008cc 91ac      	LD   R26,X
0008cd 940c 00fd 	JMP  _rc522_write_G000
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0008cf 93ea      	ST   -Y,R30
0008d0 01fe      	MOVW R30,R28
0008d1 9635      	ADIW R30,5
0008d2 93fa      	ST   -Y,R31
0008d3 93ea      	ST   -Y,R30
0008d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0008d5 e0f0      	LDI  R31,0
0008d6 0fea      	ADD  R30,R26
0008d7 1ffb      	ADC  R31,R27
0008d8 010f      	MOVW R0,R30
0008d9 2fe0      	MOV  R30,R16
0008da e0f0      	LDI  R31,0
0008db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0008dc 01de      	MOVW R26,R28
0008dd 9612      	ADIW R26,2
0008de 0fae      	ADD  R26,R30
0008df 1fbf      	ADC  R27,R31
0008e0 91ec      	LD   R30,X
0008e1 01d0      	MOVW R26,R0
0008e2 93ec      	ST   X,R30
0008e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0008e4 01fe      	MOVW R30,R28
0008e5 9638      	ADIW R30,8
0008e6 93fa      	ST   -Y,R31
0008e7 93ea      	ST   -Y,R30
0008e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0008e9 93ea      	ST   -Y,R30
0008ea 01de      	MOVW R26,R28
0008eb 9619      	ADIW R26,9
0008ec 940e 015c 	CALL _rc522_calc_crc_G000
0008ee 81ee      	LDD  R30,Y+6
0008ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0008f0 93ea      	ST   -Y,R30
0008f1 01de      	MOVW R26,R28
0008f2 9615      	ADIW R26,5
0008f3 940e 0225 	CALL _rc522_anticoll_level_G000
0008f5 30e0      	CPI  R30,0
0008f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
0008f7 81ed      	LDD  R30,Y+5
0008f8 81ac      	LDD  R26,Y+4
0008f9 27ea      	EOR  R30,R26
0008fa 81ae      	LDD  R26,Y+6
0008fb 27ea      	EOR  R30,R26
0008fc 81af      	LDD  R26,Y+7
0008fd 27ea      	EOR  R30,R26
0008fe 2f1e      	MOV  R17,R30
0008ff 85e8      	LDD  R30,Y+8
000900 17e1      	CP   R30,R17
000901 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
000902 83ec      	STD  Y+4,R30
000903 e9e3      	LDI  R30,LOW(147)
000904 93ea      	ST   -Y,R30
000905 01fe      	MOVW R30,R28
000906 9632      	ADIW R30,2
000907 93fa      	ST   -Y,R31
000908 93ea      	ST   -Y,R30
000909 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
00090a 81e9      	LDD  R30,Y+1
00090b 81fa      	LDD  R31,Y+1+1
00090c 9631      	ADIW R30,1
00090d 83e9      	STD  Y+1,R30
00090e 83fa      	STD  Y+1+1,R31
00090f 9731      	SBIW R30,1
000910 91e4      	LPM  R30,Z
000911 2f1e      	MOV  R17,R30
000912 30e0      	CPI  R30,0
000913 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000914 93ea      	ST   -Y,R30
000915 e0a0      	LDI  R26,LOW(0)
000916 940c 0676 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
000918 01fe      	MOVW R30,R28
000919 96f3      	ADIW R30,51
00091a 93fa      	ST   -Y,R31
00091b 93ea      	ST   -Y,R30
00091c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x10:
00091d 27ff      	CLR  R31
00091e 2766      	CLR  R22
00091f 2777      	CLR  R23
000920 940e 09a6 	CALL __PUTPARD1
000922 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000923 e0e0      	LDI  R30,LOW(0)
000924 93ea      	ST   -Y,R30
000925 e0a1      	LDI  R26,LOW(1)
000926 940c 0676 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
000928 01de      	MOVW R26,R28
000929 96d3      	ADIW R26,51
00092a 940c 06a4 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
                +
00092c eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 50 ) )
00092d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 50 ) )
                 	__POINTW1FN _0x0,50
00092e 93fa      	ST   -Y,R31
00092f 93ea      	ST   -Y,R30
000930 a5eb      	LDD  R30,Y+43
000931 cfeb      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000932 e08c      	LDI  R24,12
000933 940e 0868 	CALL _sprintf
000935 9660      	ADIW R28,16
000936 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x15:
000937 93ea      	ST   -Y,R30
000938 01fe      	MOVW R30,R28
000939 96b5      	ADIW R30,37
00093a 93fa      	ST   -Y,R31
00093b 93ea      	ST   -Y,R30
00093c e6a0      	LDI  R26,LOW(_DEF_KEY_A_G000)
00093d e0b2      	LDI  R27,HIGH(_DEF_KEY_A_G000)
00093e 940e 03b0 	CALL _mifare_auth_G000
000940 30e0      	CPI  R30,0
000941 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000942 940e 06b3 	CALL _lcd_putsf
000944 e2a0      	LDI  R26,LOW(800)
000945 e0b3      	LDI  R27,HIGH(800)
000946 940e 0984 	CALL _delay_ms
000948 940c 03e9 	JMP  _mifare_stop_crypto_G000
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00094a 940e 066a 	CALL __lcd_write_data
00094c e0a3      	LDI  R26,LOW(3)
00094d e0b0      	LDI  R27,0
00094e 940c 0984 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x18:
000950 e3a0      	LDI  R26,LOW(48)
000951 940e 0656 	CALL __lcd_write_nibble_G100
                +
000953 ec88     +LDI R24 , LOW ( 200 )
000954 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000955 9701     +SBIW R24 , 1
000956 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000957 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x19:
000958 932a      	ST   -Y,R18
000959 85ad      	LDD  R26,Y+13
00095a 85be      	LDD  R27,Y+13+1
00095b 85ef      	LDD  R30,Y+15
00095c 89f8      	LDD  R31,Y+15+1
00095d 9509      	ICALL
00095e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
00095f 89e8      	LDD  R30,Y+16
000960 89f9      	LDD  R31,Y+16+1
000961 9734      	SBIW R30,4
000962 8be8      	STD  Y+16,R30
000963 8bf9      	STD  Y+16+1,R31
000964 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
000965 85ad      	LDD  R26,Y+13
000966 85be      	LDD  R27,Y+13+1
000967 85ef      	LDD  R30,Y+15
000968 89f8      	LDD  R31,Y+15+1
000969 9509      	ICALL
00096a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1C:
00096b 89a8      	LDD  R26,Y+16
00096c 89b9      	LDD  R27,Y+16+1
00096d 9614      	ADIW R26,4
00096e 940e 099e 	CALL __GETW1P
000970 83ee      	STD  Y+6,R30
000971 83ff      	STD  Y+6+1,R31
000972 81ae      	LDD  R26,Y+6
000973 81bf      	LDD  R27,Y+6+1
000974 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
000975 89a8      	LDD  R26,Y+16
000976 89b9      	LDD  R27,Y+16+1
000977 9614      	ADIW R26,4
000978 940e 099e 	CALL __GETW1P
00097a 87ea      	STD  Y+10,R30
00097b 87fb      	STD  Y+10+1,R31
00097c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
00097d 01de      	MOVW R26,R28
00097e 961c      	ADIW R26,12
00097f 940e 098e 	CALL __ADDW2R15
000981 940e 099e 	CALL __GETW1P
000983 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000984 9610      	adiw r26,0
000985 f039      	breq __delay_ms1
                 __delay_ms0:
000986 95a8      	wdr
                +
000987 ed80     +LDI R24 , LOW ( 0x7D0 )
000988 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000989 9701     +SBIW R24 , 1
00098a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00098b 9711      	sbiw r26,1
00098c f7c9      	brne __delay_ms0
                 __delay_ms1:
00098d 9508      	ret
                 
                 __ADDW2R15:
00098e 2400      	CLR  R0
00098f 0daf      	ADD  R26,R15
000990 1db0      	ADC  R27,R0
000991 9508      	RET
                 
                 __ANEGW1:
000992 95f1      	NEG  R31
000993 95e1      	NEG  R30
000994 40f0      	SBCI R31,0
000995 9508      	RET
                 
                 __LSRB12:
000996 23ee      	TST  R30
000997 2e0e      	MOV  R0,R30
000998 2fea      	MOV  R30,R26
000999 f019      	BREQ __LSRB12R
                 __LSRB12L:
00099a 95e6      	LSR  R30
00099b 940a      	DEC  R0
00099c f7e9      	BRNE __LSRB12L
                 __LSRB12R:
00099d 9508      	RET
                 
                 __GETW1P:
00099e 91ed      	LD   R30,X+
00099f 91fc      	LD   R31,X
0009a0 9711      	SBIW R26,1
0009a1 9508      	RET
                 
                 __GETW1PF:
0009a2 9005      	LPM  R0,Z+
0009a3 91f4      	LPM  R31,Z
0009a4 2de0      	MOV  R30,R0
0009a5 9508      	RET
                 
                 __PUTPARD1:
0009a6 937a      	ST   -Y,R23
0009a7 936a      	ST   -Y,R22
0009a8 93fa      	ST   -Y,R31
0009a9 93ea      	ST   -Y,R30
0009aa 9508      	RET
                 
                 __SAVELOCR6:
0009ab 935a      	ST   -Y,R21
                 __SAVELOCR5:
0009ac 934a      	ST   -Y,R20
                 __SAVELOCR4:
0009ad 933a      	ST   -Y,R19
                 __SAVELOCR3:
0009ae 932a      	ST   -Y,R18
                 __SAVELOCR2:
0009af 931a      	ST   -Y,R17
0009b0 930a      	ST   -Y,R16
0009b1 9508      	RET
                 
                 __LOADLOCR6:
0009b2 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0009b3 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0009b4 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0009b5 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0009b6 8119      	LDD  R17,Y+1
0009b7 8108      	LD   R16,Y
0009b8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  16 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  81 r17: 123 r18:  33 r19:  22 r20:  11 r21:  21 r22:   6 r23:   2 
r24:  27 r25:   5 r26: 305 r27: 129 r28:  65 r29:   1 r30: 649 r31: 122 
x  :  50 y  : 545 z  :  34 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :  10 
adiw  :  74 and   :   1 andi  :  21 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  39 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  57 brpl  :   1 brsh  :  14 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 176 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   8 cpc   :   2 cpi   :  77 cpse  :   0 dec   :   6 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  27 inc   :   2 jmp   :  41 ld    :  36 ldd   : 286 ldi   : 321 
lds   :   0 lpm   :  16 lsl   :  11 lsr   :   1 mov   :  65 movw  :  43 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   8 out   :  30 pop   :  15 push  :  15 rcall : 100 ret   :  55 
reti  :   0 rjmp  : 113 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :  31 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 222 std   :  72 sts   :   2 sub   :   1 subi  :  31 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001372   4654    324   4978   32768  15.2%
[.dseg] 0x000060 0x000270      0     16     16    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
