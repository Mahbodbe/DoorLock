
AVRASM ver. 2.1.30  I:\EmC-Proj\PH3-COM\Debug\List\main.asm Mon Sep 08 18:00:13 2025

I:\EmC-Proj\PH3-COM\Debug\List\main.asm(1088): warning: Register r5 already defined by the .DEF directive
I:\EmC-Proj\PH3-COM\Debug\List\main.asm(1089): warning: Register r4 already defined by the .DEF directive
I:\EmC-Proj\PH3-COM\Debug\List\main.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004f 	JMP  __RESET
000002 940c 0103 	JMP  _ext_int0_isr
000004 940c 0125 	JMP  _ext_int1_isr
000006 940c 012b 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 443e
00002b 7369
00002c 7241
00002d 006d      	.DB  0x3E,0x44,0x69,0x73,0x41,0x72,0x6D,0x0
00002e 413e
00002f 6d72
000030 3e00
000031 614c      	.DB  0x3E,0x41,0x72,0x6D,0x0,0x3E,0x4C,0x61
000032 6573
000033 2072
000034 6573
000035 736e      	.DB  0x73,0x65,0x72,0x20,0x73,0x65,0x6E,0x73
000036 0065
000037 6f4d
000038 6576
000039 656d      	.DB  0x65,0x0,0x4D,0x6F,0x76,0x65,0x6D,0x65
00003a 746e
00003b 7320
00003c 6e65
00003d 6573      	.DB  0x6E,0x74,0x20,0x73,0x65,0x6E,0x73,0x65
00003e 3e00
00003f 6f4d
000040 6576
000041 656d      	.DB  0x0,0x3E,0x4D,0x6F,0x76,0x65,0x6D,0x65
000042 746e
000043 7320
000044 6e65
000045 6573      	.DB  0x6E,0x74,0x20,0x73,0x65,0x6E,0x73,0x65
000046 3e00
000047 6f42
000048 6874
I:\EmC-Proj\PH3-COM\Debug\List\main.asm(1129): warning: .cseg .db misalignment - padding zero byte
000049 0000      	.DB  0x0,0x3E,0x42,0x6F,0x74,0x68,0x0
                 _0x2000003:
00004a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004b 0002      	.DW  0x02
00004c 0269      	.DW  __base_y_G100
00004d 0094      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004f 94f8      	CLI
000050 27ee      	CLR  R30
000051 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000052 e0f1      	LDI  R31,1
000053 bffb      	OUT  GICR,R31
000054 bfeb      	OUT  GICR,R30
000055 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000056 e08d      	LDI  R24,(14-2)+1
000057 e0a2      	LDI  R26,2
000058 27bb      	CLR  R27
                 __CLEAR_REG:
000059 93ed      	ST   X+,R30
00005a 958a      	DEC  R24
00005b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005f 93ed      	ST   X+,R30
000060 9701      	SBIW R24,1
000061 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000062 e9e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000063 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000064 9185      	LPM  R24,Z+
000065 9195      	LPM  R25,Z+
000066 9700      	SBIW R24,0
000067 f061      	BREQ __GLOBAL_INI_END
000068 91a5      	LPM  R26,Z+
000069 91b5      	LPM  R27,Z+
00006a 9005      	LPM  R0,Z+
00006b 9015      	LPM  R1,Z+
00006c 01bf      	MOVW R22,R30
00006d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006e 9005      	LPM  R0,Z+
00006f 920d      	ST   X+,R0
000070 9701      	SBIW R24,1
000071 f7e1      	BRNE __GLOBAL_INI_LOOP
000072 01fb      	MOVW R30,R22
000073 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000074 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000075 bfed      	OUT  SPL,R30
000076 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000077 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000078 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000079 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007a 940c 014b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdint.h>
                 ;
                 ;volatile uint8_t control = 0;
                 ;volatile uint8_t controlL = 0;
                 ;volatile uint8_t counter = 0;
                 ;volatile uint8_t isBuzz1 = 0;
                 ;volatile uint8_t isBuzz2 = 0;
                 ;volatile uint8_t selectorT = 0;
                 ;volatile uint8_t selectorL = 0;
                 ;volatile uint8_t controlMenu = 0;
                 ;volatile uint8_t check = 0;
                 ;volatile uint8_t temp = 0;
                 ;volatile uint8_t t_temp = 0;
                 ;
                 ;
                 ;int ChooseMenu(void){
                 ; 0000 0013 int ChooseMenu(void){
                 
                 	.CSEG
                 _ChooseMenu:
                 ; .FSTART _ChooseMenu
                 ; 0000 0014     if (controlMenu == 0){
00007c 91e0 0265 	LDS  R30,_controlMenu
00007e 30e0      	CPI  R30,0
00007f f519      	BRNE _0x3
                 ; 0000 0015         if (selectorT == 0){
000080 91e0 0263 	LDS  R30,_selectorT
000082 30e0      	CPI  R30,0
000083 f469      	BRNE _0x4
                 ; 0000 0016             lcd_gotoxy(0,0); lcd_putsf(">DisArm");
000084 940e 027f 	CALL SUBOPT_0x0
                +
000086 e5a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000087 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000088 940e 0283 	CALL SUBOPT_0x1
                 ; 0000 0017             lcd_gotoxy(0,1); lcd_putsf("Arm");
                +
00008a e5a8     +LDI R26 , LOW ( 2 * _0x0 + ( 4 ) )
00008b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW2FN _0x0,4
00008c 940e 0241 	CALL _lcd_putsf
                 ; 0000 0018             return 0;
00008e e0e0      	LDI  R30,LOW(0)
00008f e0f0      	LDI  R31,HIGH(0)
000090 9508      	RET
                 ; 0000 0019         }
                 ; 0000 001A         else if(selectorT == 1){
                 _0x4:
000091 91a0 0263 	LDS  R26,_selectorT
000093 30a1      	CPI  R26,LOW(0x1)
000094 f469      	BRNE _0x6
                 ; 0000 001B             lcd_gotoxy(0,0); lcd_putsf("DisArm");
000095 940e 027f 	CALL SUBOPT_0x0
                +
000097 e5a5     +LDI R26 , LOW ( 2 * _0x0 + ( 1 ) )
000098 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 1 ) )
                 	__POINTW2FN _0x0,1
000099 940e 0283 	CALL SUBOPT_0x1
                 ; 0000 001C             lcd_gotoxy(0,1); lcd_putsf(">Arm");
                +
00009b e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 8 ) )
00009c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW2FN _0x0,8
00009d 940e 0241 	CALL _lcd_putsf
                 ; 0000 001D             return 1;
00009f e0e1      	LDI  R30,LOW(1)
0000a0 e0f0      	LDI  R31,HIGH(1)
0000a1 9508      	RET
                 ; 0000 001E         }
                 ; 0000 001F     }
                 _0x6:
                 ; 0000 0020     else if(controlMenu == 1){
0000a2 c037      	RJMP _0x7
                 _0x3:
0000a3 91a0 0265 	LDS  R26,_controlMenu
0000a5 30a1      	CPI  R26,LOW(0x1)
0000a6 f599      	BRNE _0x8
                 ; 0000 0021         if(selectorL == 0){
0000a7 91e0 0264 	LDS  R30,_selectorL
0000a9 30e0      	CPI  R30,0
0000aa f469      	BRNE _0x9
                 ; 0000 0022             lcd_gotoxy(0,0); lcd_putsf(">Laser sense");
0000ab 940e 027f 	CALL SUBOPT_0x0
                +
0000ad e6a1     +LDI R26 , LOW ( 2 * _0x0 + ( 13 ) )
0000ae e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW2FN _0x0,13
0000af 940e 0283 	CALL SUBOPT_0x1
                 ; 0000 0023             lcd_gotoxy(0,1); lcd_putsf("Movement sense");
                +
0000b1 e6ae     +LDI R26 , LOW ( 2 * _0x0 + ( 26 ) )
0000b2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 26 ) )
                 	__POINTW2FN _0x0,26
0000b3 940e 0241 	CALL _lcd_putsf
                 ; 0000 0024             return 2;
0000b5 e0e2      	LDI  R30,LOW(2)
0000b6 e0f0      	LDI  R31,HIGH(2)
0000b7 9508      	RET
                 ; 0000 0025         }
                 ; 0000 0026         else if(selectorL == 1){
                 _0x9:
0000b8 91a0 0264 	LDS  R26,_selectorL
0000ba 30a1      	CPI  R26,LOW(0x1)
0000bb f469      	BRNE _0xB
                 ; 0000 0027             lcd_gotoxy(0,0); lcd_putsf("Laser sense");
0000bc 940e 027f 	CALL SUBOPT_0x0
                +
0000be e6a2     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
0000bf e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
0000c0 940e 0283 	CALL SUBOPT_0x1
                 ; 0000 0028             lcd_gotoxy(0,1); lcd_putsf(">Movement sense");
                +
0000c2 e7ad     +LDI R26 , LOW ( 2 * _0x0 + ( 41 ) )
0000c3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 41 ) )
                 	__POINTW2FN _0x0,41
0000c4 940e 0241 	CALL _lcd_putsf
                 ; 0000 0029             return 3;
0000c6 e0e3      	LDI  R30,LOW(3)
0000c7 e0f0      	LDI  R31,HIGH(3)
0000c8 9508      	RET
                 ; 0000 002A         }
                 ; 0000 002B         else if(selectorL == 2){
                 _0xB:
0000c9 91a0 0264 	LDS  R26,_selectorL
0000cb 30a2      	CPI  R26,LOW(0x2)
0000cc f469      	BRNE _0xD
                 ; 0000 002C             lcd_gotoxy(0,0); lcd_putsf("Movement sense");
0000cd 940e 027f 	CALL SUBOPT_0x0
                +
0000cf e6ae     +LDI R26 , LOW ( 2 * _0x0 + ( 26 ) )
0000d0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 26 ) )
                 	__POINTW2FN _0x0,26
0000d1 940e 0283 	CALL SUBOPT_0x1
                 ; 0000 002D             lcd_gotoxy(0,1); lcd_putsf(">Both");
                +
0000d3 e8ad     +LDI R26 , LOW ( 2 * _0x0 + ( 57 ) )
0000d4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 57 ) )
                 	__POINTW2FN _0x0,57
0000d5 940e 0241 	CALL _lcd_putsf
                 ; 0000 002E             return 4;
0000d7 e0e4      	LDI  R30,LOW(4)
0000d8 e0f0      	LDI  R31,HIGH(4)
0000d9 9508      	RET
                 ; 0000 002F         }
                 ; 0000 0030     }
                 _0xD:
                 ; 0000 0031 
                 ; 0000 0032     return -1;
                 _0x8:
                 _0x7:
0000da efef      	LDI  R30,LOW(65535)
0000db efff      	LDI  R31,HIGH(65535)
0000dc 9508      	RET
                 ; 0000 0033 
                 ; 0000 0034 }
                 ; .FEND
                 ;
                 ;void LDR(int v){
                 ; 0000 0036 void LDR(int v){
                 _LDR:
                 ; .FSTART _LDR
                 ; 0000 0037 
                 ; 0000 0038     if(v > 500){
0000dd 93ba      	ST   -Y,R27
0000de 93aa      	ST   -Y,R26
                 ;	v -> Y+0
0000df 81a8      	LD   R26,Y
0000e0 81b9      	LDD  R27,Y+1
0000e1 3fa5      	CPI  R26,LOW(0x1F5)
0000e2 e0e1      	LDI  R30,HIGH(0x1F5)
0000e3 07be      	CPC  R27,R30
0000e4 f024      	BRLT _0xE
                 ; 0000 0039 
                 ; 0000 003A         PORTB |= (PORTB1 << 1);
0000e5 9ac1      	SBI  0x18,1
                 ; 0000 003B         delay_ms(115);
0000e6 940e 0288 	CALL SUBOPT_0x2
                 ; 0000 003C         PORTD |= (1 << PORTD5);
                 ; 0000 003D         isBuzz1 = 1;
0000e8 c007      	RJMP _0x32
                 ; 0000 003E         }
                 ; 0000 003F     else{
                 _0xE:
                 ; 0000 0040         PORTB &= ~(PORTB1 << 1);
0000e9 98c1      	CBI  0x18,1
                 ; 0000 0041         if(isBuzz2 == 0)
0000ea 91e0 0262 	LDS  R30,_isBuzz2
0000ec 30e0      	CPI  R30,0
0000ed f409      	BRNE _0x10
                 ; 0000 0042             PORTD &= ~(1 << PORTD5);
0000ee 9895      	CBI  0x12,5
                 ; 0000 0043         isBuzz1 = 0;
                 _0x10:
0000ef e0e0      	LDI  R30,LOW(0)
                 _0x32:
0000f0 93e0 0261 	STS  _isBuzz1,R30
                 ; 0000 0044         }
                 ; 0000 0045 
                 ; 0000 0046 }
0000f2 c12d      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;void PIR(void) {
                 ; 0000 0048 void PIR(void) {
                 _PIR:
                 ; .FSTART _PIR
                 ; 0000 0049 
                 ; 0000 004A     if (PIND & (1 << PORTD7)){
0000f3 9b87      	SBIS 0x10,7
0000f4 c004      	RJMP _0x11
                 ; 0000 004B         PORTD |= (1 << PORTD6);
0000f5 9a96      	SBI  0x12,6
                 ; 0000 004C         delay_ms(115);
0000f6 940e 0288 	CALL SUBOPT_0x2
                 ; 0000 004D         PORTD |= (1 << PORTD5);
                 ; 0000 004E         isBuzz2 = 1;
0000f8 c007      	RJMP _0x33
                 ; 0000 004F         }
                 ; 0000 0050     else
                 _0x11:
                 ; 0000 0051     {
                 ; 0000 0052         PORTD &= ~(1 << PORTD6);
0000f9 9896      	CBI  0x12,6
                 ; 0000 0053         if (isBuzz1 == 0)
0000fa 91e0 0261 	LDS  R30,_isBuzz1
0000fc 30e0      	CPI  R30,0
0000fd f409      	BRNE _0x13
                 ; 0000 0054             PORTD &= ~(1 << PORTD5 );
0000fe 9895      	CBI  0x12,5
                 ; 0000 0055         isBuzz2 = 0;
                 _0x13:
0000ff e0e0      	LDI  R30,LOW(0)
                 _0x33:
000100 93e0 0262 	STS  _isBuzz2,R30
                 ; 0000 0056     }
                 ; 0000 0057 
                 ; 0000 0058 }
000102 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 005B {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000103 940e 028f 	CALL SUBOPT_0x3
                 ; 0000 005C     if (control == 0 ){
000105 30e0      	CPI  R30,0
000106 f469      	BRNE _0x14
                 ; 0000 005D         selectorT += 1;
000107 91e0 0263 	LDS  R30,_selectorT
000109 5fef      	SUBI R30,-LOW(1)
00010a 93e0 0263 	STS  _selectorT,R30
                 ; 0000 005E         if(selectorT == 2)
00010c 91a0 0263 	LDS  R26,_selectorT
00010e 30a2      	CPI  R26,LOW(0x2)
00010f f419      	BRNE _0x15
                 ; 0000 005F             selectorT = 0;
000110 e0e0      	LDI  R30,LOW(0)
000111 93e0 0263 	STS  _selectorT,R30
                 ; 0000 0060     }
                 _0x15:
                 ; 0000 0061     else if (control == 1){
000113 c010      	RJMP _0x16
                 _0x14:
000114 91a0 0260 	LDS  R26,_control
000116 30a1      	CPI  R26,LOW(0x1)
000117 f461      	BRNE _0x17
                 ; 0000 0062         selectorL += 1;
000118 91e0 0264 	LDS  R30,_selectorL
00011a 5fef      	SUBI R30,-LOW(1)
00011b 93e0 0264 	STS  _selectorL,R30
                 ; 0000 0063         if(selectorL == 3)
00011d 91a0 0264 	LDS  R26,_selectorL
00011f 30a3      	CPI  R26,LOW(0x3)
000120 f419      	BRNE _0x18
                 ; 0000 0064             selectorL = 0;
000121 e0e0      	LDI  R30,LOW(0)
000122 93e0 0264 	STS  _selectorL,R30
                 ; 0000 0065     }
                 _0x18:
                 ; 0000 0066 }
                 _0x17:
                 _0x16:
000124 c012      	RJMP _0x34
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0069 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000125 93ea      	ST   -Y,R30
                 ; 0000 006A 
                 ; 0000 006B check = 1;
000126 e0e1      	LDI  R30,LOW(1)
000127 93e0 0266 	STS  _check,R30
                 ; 0000 006C 
                 ; 0000 006D }
000129 91e9      	LD   R30,Y+
00012a 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0070 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
00012b 940e 028f 	CALL SUBOPT_0x3
                 ; 0000 0071 
                 ; 0000 0072 control += 1;
00012d 5fef      	SUBI R30,-LOW(1)
00012e 93e0 0260 	STS  _control,R30
                 ; 0000 0073 if (control == 2)
000130 91a0 0260 	LDS  R26,_control
000132 30a2      	CPI  R26,LOW(0x2)
000133 f419      	BRNE _0x19
                 ; 0000 0074     control = 0;
000134 e0e0      	LDI  R30,LOW(0)
000135 93e0 0260 	STS  _control,R30
                 ; 0000 0075 
                 ; 0000 0076 
                 ; 0000 0077 }
                 _0x19:
                 _0x34:
000137 91e9      	LD   R30,Y+
000138 bfef      	OUT  SREG,R30
000139 91e9      	LD   R30,Y+
00013a 91a9      	LD   R26,Y+
00013b 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 007D {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 007E ADMUX=adc_input | ADC_VREF_TYPE;
00013c 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00013d 81e8      	LD   R30,Y
00013e 64e0      	ORI  R30,0x40
00013f b9e7      	OUT  0x7,R30
                 ; 0000 007F delay_us(10);
                +
000140 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000141 958a     +DEC R24
000142 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0080 ADCSRA|=(1<<ADSC);
000143 9a36      	SBI  0x6,6
                 ; 0000 0081 while ((ADCSRA & (1<<ADIF))==0);
                 _0x1A:
000144 9b34      	SBIS 0x6,4
000145 cffe      	RJMP _0x1A
                 ; 0000 0082 ADCSRA|=(1<<ADIF);
000146 9a34      	SBI  0x6,4
                 ; 0000 0083 return ADCW;
000147 b1e4      	IN   R30,0x4
000148 b1f5      	IN   R31,0x4+1
000149 940c 027d 	JMP  _0x2020001
                 ; 0000 0084 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0087 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0088 // Port A initialization
                 ; 0000 0089 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 008A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00014b e0e0      	LDI  R30,LOW(0)
00014c bbea      	OUT  0x1A,R30
                 ; 0000 008B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 008C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00014d bbeb      	OUT  0x1B,R30
                 ; 0000 008D 
                 ; 0000 008E // Port B initialization
                 ; 0000 008F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0090 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
00014e e0e3      	LDI  R30,LOW(3)
00014f bbe7      	OUT  0x17,R30
                 ; 0000 0091 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0092 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000150 e0e0      	LDI  R30,LOW(0)
000151 bbe8      	OUT  0x18,R30
                 ; 0000 0093 
                 ; 0000 0094 // Port C initialization
                 ; 0000 0095 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0096 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000152 bbe4      	OUT  0x14,R30
                 ; 0000 0097 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0098 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000153 bbe5      	OUT  0x15,R30
                 ; 0000 0099 
                 ; 0000 009A // Port D initialization
                 ; 0000 009B // Function: Bit7=In Bit6=Out Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009C DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000154 e7e0      	LDI  R30,LOW(112)
000155 bbe1      	OUT  0x11,R30
                 ; 0000 009D // State: Bit7=T Bit6=0 Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 009E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000156 e0e0      	LDI  R30,LOW(0)
000157 bbe2      	OUT  0x12,R30
                 ; 0000 009F 
                 ; 0000 00A0 // Timer/Counter 0 initialization
                 ; 0000 00A1 // Clock source: System Clock
                 ; 0000 00A2 // Clock value: Timer 0 Stopped
                 ; 0000 00A3 // Mode: Normal top=0xFF
                 ; 0000 00A4 // OC0 output: Disconnected
                 ; 0000 00A5 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000158 bfe3      	OUT  0x33,R30
                 ; 0000 00A6 TCNT0=0x00;
000159 bfe2      	OUT  0x32,R30
                 ; 0000 00A7 OCR0=0x00;
00015a bfec      	OUT  0x3C,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Timer/Counter 1 initialization
                 ; 0000 00AA // Clock source: System Clock
                 ; 0000 00AB // Clock value: Timer1 Stopped
                 ; 0000 00AC // Mode: Normal top=0xFFFF
                 ; 0000 00AD // OC1A output: Disconnected
                 ; 0000 00AE // OC1B output: Disconnected
                 ; 0000 00AF // Noise Canceler: Off
                 ; 0000 00B0 // Input Capture on Falling Edge
                 ; 0000 00B1 // Timer1 Overflow Interrupt: Off
                 ; 0000 00B2 // Input Capture Interrupt: Off
                 ; 0000 00B3 // Compare A Match Interrupt: Off
                 ; 0000 00B4 // Compare B Match Interrupt: Off
                 ; 0000 00B5 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00015b bdef      	OUT  0x2F,R30
                 ; 0000 00B6 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00015c bdee      	OUT  0x2E,R30
                 ; 0000 00B7 TCNT1H=0x00;
00015d bded      	OUT  0x2D,R30
                 ; 0000 00B8 TCNT1L=0x00;
00015e bdec      	OUT  0x2C,R30
                 ; 0000 00B9 ICR1H=0x00;
00015f bde7      	OUT  0x27,R30
                 ; 0000 00BA ICR1L=0x00;
000160 bde6      	OUT  0x26,R30
                 ; 0000 00BB OCR1AH=0x00;
000161 bdeb      	OUT  0x2B,R30
                 ; 0000 00BC OCR1AL=0x00;
000162 bdea      	OUT  0x2A,R30
                 ; 0000 00BD OCR1BH=0x00;
000163 bde9      	OUT  0x29,R30
                 ; 0000 00BE OCR1BL=0x00;
000164 bde8      	OUT  0x28,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // Timer/Counter 2 initialization
                 ; 0000 00C1 // Clock source: System Clock
                 ; 0000 00C2 // Clock value: Timer2 Stopped
                 ; 0000 00C3 // Mode: Normal top=0xFF
                 ; 0000 00C4 // OC2 output: Disconnected
                 ; 0000 00C5 ASSR=0<<AS2;
000165 bde2      	OUT  0x22,R30
                 ; 0000 00C6 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000166 bde5      	OUT  0x25,R30
                 ; 0000 00C7 TCNT2=0x00;
000167 bde4      	OUT  0x24,R30
                 ; 0000 00C8 OCR2=0x00;
000168 bde3      	OUT  0x23,R30
                 ; 0000 00C9 
                 ; 0000 00CA // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00CB TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000169 bfe9      	OUT  0x39,R30
                 ; 0000 00CC 
                 ; 0000 00CD // External Interrupt(s) initialization
                 ; 0000 00CE // INT0: On
                 ; 0000 00CF // INT0 Mode: Falling Edge
                 ; 0000 00D0 // INT1: On
                 ; 0000 00D1 // INT1 Mode: Falling Edge
                 ; 0000 00D2 // INT2: On
                 ; 0000 00D3 // INT2 Mode: Falling Edge
                 ; 0000 00D4 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
00016a b7eb      	IN   R30,0x3B
00016b 6ee0      	ORI  R30,LOW(0xE0)
00016c bfeb      	OUT  0x3B,R30
                 ; 0000 00D5 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
00016d e0ea      	LDI  R30,LOW(10)
00016e bfe5      	OUT  0x35,R30
                 ; 0000 00D6 MCUCSR=(0<<ISC2);
00016f e0e0      	LDI  R30,LOW(0)
000170 bfe4      	OUT  0x34,R30
                 ; 0000 00D7 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
000171 eee0      	LDI  R30,LOW(224)
000172 bfea      	OUT  0x3A,R30
                 ; 0000 00D8 
                 ; 0000 00D9 // USART initialization
                 ; 0000 00DA // USART disabled
                 ; 0000 00DB UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000173 e0e0      	LDI  R30,LOW(0)
000174 b9ea      	OUT  0xA,R30
                 ; 0000 00DC 
                 ; 0000 00DD // Analog Comparator initialization
                 ; 0000 00DE // Analog Comparator: Off
                 ; 0000 00DF // The Analog Comparator's positive input is
                 ; 0000 00E0 // connected to the AIN0 pin
                 ; 0000 00E1 // The Analog Comparator's negative input is
                 ; 0000 00E2 // connected to the AIN1 pin
                 ; 0000 00E3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000175 e8e0      	LDI  R30,LOW(128)
000176 b9e8      	OUT  0x8,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // ADC initialization
                 ; 0000 00E6 // ADC Clock frequency: 125.000 kHz
                 ; 0000 00E7 // ADC Voltage Reference: AVCC pin
                 ; 0000 00E8 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00E9 ADMUX=ADC_VREF_TYPE;
000177 e4e0      	LDI  R30,LOW(64)
000178 b9e7      	OUT  0x7,R30
                 ; 0000 00EA ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
000179 e8e6      	LDI  R30,LOW(134)
00017a b9e6      	OUT  0x6,R30
                 ; 0000 00EB SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00017b e0e0      	LDI  R30,LOW(0)
00017c bfe0      	OUT  0x30,R30
                 ; 0000 00EC 
                 ; 0000 00ED // SPI initialization
                 ; 0000 00EE // SPI disabled
                 ; 0000 00EF SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00017d b9ed      	OUT  0xD,R30
                 ; 0000 00F0 
                 ; 0000 00F1 // TWI initialization
                 ; 0000 00F2 // TWI disabled
                 ; 0000 00F3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00017e bfe6      	OUT  0x36,R30
                 ; 0000 00F4 
                 ; 0000 00F5 // Alphanumeric LCD initialization
                 ; 0000 00F6 // Connections are specified in the
                 ; 0000 00F7 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00F8 // RS - PORTC Bit 0
                 ; 0000 00F9 // RD - PORTC Bit 1
                 ; 0000 00FA // EN - PORTC Bit 2
                 ; 0000 00FB // D4 - PORTC Bit 4
                 ; 0000 00FC // D5 - PORTC Bit 5
                 ; 0000 00FD // D6 - PORTC Bit 6
                 ; 0000 00FE // D7 - PORTC Bit 7
                 ; 0000 00FF // Characters/line: 16
                 ; 0000 0100 MCUCSR |= (1<<JTD);
00017f b7e4      	IN   R30,0x34
000180 68e0      	ORI  R30,0x80
000181 bfe4      	OUT  0x34,R30
                 ; 0000 0101 MCUCSR |= (1<<JTD);
000182 b7e4      	IN   R30,0x34
000183 68e0      	ORI  R30,0x80
000184 bfe4      	OUT  0x34,R30
                 ; 0000 0102 
                 ; 0000 0103 delay_ms(30);
000185 e1ae      	LDI  R26,LOW(30)
000186 e0b0      	LDI  R27,0
000187 940e 02bf 	CALL _delay_ms
                 ; 0000 0104 lcd_init(16);
000189 e1a0      	LDI  R26,LOW(16)
00018a d0c9      	RCALL _lcd_init
                 ; 0000 0105 
                 ; 0000 0106 
                 ; 0000 0107 // Global enable interrupts
                 ; 0000 0108 #asm("sei")
00018b 9478      	sei
                 ; 0000 0109 
                 ; 0000 010A 
                 ; 0000 010B while (1)
                 _0x1D:
                 ; 0000 010C       {
                 ; 0000 010D       temp = ChooseMenu();
00018c deef      	RCALL _ChooseMenu
00018d 93e0 0267 	STS  _temp,R30
                 ; 0000 010E       if(temp != t_temp)
00018f 91e0 0268 	LDS  R30,_t_temp
000191 91a0 0267 	LDS  R26,_temp
000193 17ea      	CP   R30,R26
000194 f009      	BREQ _0x20
                 ; 0000 010F         lcd_clear();
000195 d08c      	RCALL _lcd_clear
                 ; 0000 0110 
                 ; 0000 0111       switch(temp){
                 _0x20:
000196 91e0 0267 	LDS  R30,_temp
000198 e0f0      	LDI  R31,0
                 ; 0000 0112         case 0:
000199 9730      	SBIW R30,0
00019a f431      	BRNE _0x24
                 ; 0000 0113             if(check == 1){
00019b 91a0 0266 	LDS  R26,_check
00019d 30a1      	CPI  R26,LOW(0x1)
00019e f409      	BRNE _0x25
                 ; 0000 0114                 PORTD |= (1 << PORTD5);
00019f d0f6      	RCALL SUBOPT_0x4
                 ; 0000 0115                 delay_ms(10);
                 ; 0000 0116                 PORTD &= ~(1 << PORTD5 );
                 ; 0000 0117                 check = 0;
                 ; 0000 0118             }
                 ; 0000 0119             break;
                 _0x25:
0001a0 c04a      	RJMP _0x23
                 ; 0000 011A         case 1:
                 _0x24:
0001a1 30e1      	CPI  R30,LOW(0x1)
0001a2 e0a0      	LDI  R26,HIGH(0x1)
0001a3 07fa      	CPC  R31,R26
0001a4 f449      	BRNE _0x26
                 ; 0000 011B             if(check == 1){
0001a5 91a0 0266 	LDS  R26,_check
0001a7 30a1      	CPI  R26,LOW(0x1)
0001a8 f421      	BRNE _0x27
                 ; 0000 011C                 controlMenu = 1;
0001a9 e0e1      	LDI  R30,LOW(1)
0001aa 93e0 0265 	STS  _controlMenu,R30
                 ; 0000 011D                 PORTD |= (1 << PORTD5);
0001ac d0e9      	RCALL SUBOPT_0x4
                 ; 0000 011E                 delay_ms(10);
                 ; 0000 011F                 PORTD &= ~(1 << PORTD5);
                 ; 0000 0120                 check = 0;
                 ; 0000 0121             }
                 ; 0000 0122             break;
                 _0x27:
0001ad c03d      	RJMP _0x23
                 ; 0000 0123         case 2:
                 _0x26:
0001ae 30e2      	CPI  R30,LOW(0x2)
0001af e0a0      	LDI  R26,HIGH(0x2)
0001b0 07fa      	CPC  R31,R26
0001b1 f479      	BRNE _0x28
                 ; 0000 0124           if(control == 1){
0001b2 91a0 0260 	LDS  R26,_control
0001b4 30a1      	CPI  R26,LOW(0x1)
0001b5 f449      	BRNE _0x29
                 ; 0000 0125             unsigned int v = read_adc(0);
                 ; 0000 0126             PORTD &= ~(1 << PORTD6);
0001b6 d0e9      	RCALL SUBOPT_0x5
                 ;	v -> Y+0
0001b7 9896      	CBI  0x12,6
                 ; 0000 0127             PORTB |= (1 << PORTB0);
0001b8 9ac0      	SBI  0x18,0
                 ; 0000 0128             LDR(v);
0001b9 81a8      	LD   R26,Y
0001ba 81b9      	LDD  R27,Y+1
0001bb df21      	RCALL _LDR
                 ; 0000 0129             delay_ms(100);
0001bc d0ea      	RCALL SUBOPT_0x6
                 ; 0000 012A             }
0001bd 9622      	ADIW R28,2
                 ; 0000 012B           else{
0001be c001      	RJMP _0x2A
                 _0x29:
                 ; 0000 012C             PORTB &= ~(PORTB1 << 1);
0001bf d0eb      	RCALL SUBOPT_0x7
                 ; 0000 012D             PORTB &= ~(1 << PORTB0);
                 ; 0000 012E             PORTD &= ~(1 << PORTD5);
                 ; 0000 012F             PORTD &= ~(1 << PORTD6);
                 ; 0000 0130             controlMenu = 0;
                 ; 0000 0131           }
                 _0x2A:
                 ; 0000 0132           break;
0001c0 c02a      	RJMP _0x23
                 ; 0000 0133         case 3:
                 _0x28:
0001c1 30e3      	CPI  R30,LOW(0x3)
0001c2 e0a0      	LDI  R26,HIGH(0x3)
0001c3 07fa      	CPC  R31,R26
0001c4 f461      	BRNE _0x2B
                 ; 0000 0134           if(control == 1){
0001c5 91a0 0260 	LDS  R26,_control
0001c7 30a1      	CPI  R26,LOW(0x1)
0001c8 f431      	BRNE _0x2C
                 ; 0000 0135             PORTB &= ~(PORTB1 << 1);
0001c9 98c1      	CBI  0x18,1
                 ; 0000 0136             PORTB &= ~(1 << PORTB0);
0001ca 98c0      	CBI  0x18,0
                 ; 0000 0137             PORTD |= (1 << PORTD4);
0001cb 9a94      	SBI  0x12,4
                 ; 0000 0138             PIR();
0001cc df26      	RCALL _PIR
                 ; 0000 0139             delay_ms(100);
0001cd d0d9      	RCALL SUBOPT_0x6
                 ; 0000 013A             }
                 ; 0000 013B           else{
0001ce c001      	RJMP _0x2D
                 _0x2C:
                 ; 0000 013C             PORTB &= ~(PORTB1 << 1);
0001cf d0db      	RCALL SUBOPT_0x7
                 ; 0000 013D             PORTB &= ~(1 << PORTB0);
                 ; 0000 013E             PORTD &= ~(1 << PORTD5);
                 ; 0000 013F             PORTD &= ~(1 << PORTD6);
                 ; 0000 0140             controlMenu = 0;
                 ; 0000 0141           }
                 _0x2D:
                 ; 0000 0142           break;
0001d0 c01a      	RJMP _0x23
                 ; 0000 0143         case 4:
                 _0x2B:
0001d1 30e4      	CPI  R30,LOW(0x4)
0001d2 e0a0      	LDI  R26,HIGH(0x4)
0001d3 07fa      	CPC  R31,R26
0001d4 f4b1      	BRNE _0x23
                 ; 0000 0144 
                 ; 0000 0145           if(control == 1){
0001d5 91a0 0260 	LDS  R26,_control
0001d7 30a1      	CPI  R26,LOW(0x1)
0001d8 f451      	BRNE _0x2F
                 ; 0000 0146             unsigned int v = read_adc(0);
                 ; 0000 0147             PORTB |= (1 << PORTB0);
0001d9 d0c6      	RCALL SUBOPT_0x5
                 ;	v -> Y+0
0001da 9ac0      	SBI  0x18,0
                 ; 0000 0148             LDR(v);
0001db 81a8      	LD   R26,Y
0001dc 81b9      	LDD  R27,Y+1
0001dd deff      	RCALL _LDR
                 ; 0000 0149             PORTD |= (1 << PORTD4);
0001de 9a94      	SBI  0x12,4
                 ; 0000 014A             PIR();
0001df df13      	RCALL _PIR
                 ; 0000 014B             delay_ms(100);
0001e0 d0c6      	RCALL SUBOPT_0x6
                 ; 0000 014C             }
0001e1 9622      	ADIW R28,2
                 ; 0000 014D           else{
0001e2 c008      	RJMP _0x30
                 _0x2F:
                 ; 0000 014E             PORTB &= ~(PORTB1 << 1);
0001e3 98c1      	CBI  0x18,1
                 ; 0000 014F             PORTB &= ~(1 << PORTB0);
0001e4 98c0      	CBI  0x18,0
                 ; 0000 0150             PORTD &= ~(1 << PORTD5);
0001e5 9895      	CBI  0x12,5
                 ; 0000 0151             PORTD &= ~(1 << PORTD4);
0001e6 9894      	CBI  0x12,4
                 ; 0000 0152             PORTD &= ~(1 << PORTD6);
0001e7 9896      	CBI  0x12,6
                 ; 0000 0153             controlMenu = 0;
0001e8 e0e0      	LDI  R30,LOW(0)
0001e9 93e0 0265 	STS  _controlMenu,R30
                 ; 0000 0154           }
                 _0x30:
                 ; 0000 0155           break;
                 ; 0000 0156       }
                 _0x23:
                 ; 0000 0157 
                 ; 0000 0158 
                 ; 0000 0159       delay_ms(10);
0001eb e0aa      	LDI  R26,LOW(10)
0001ec e0b0      	LDI  R27,0
0001ed 940e 02bf 	CALL _delay_ms
                 ; 0000 015A       t_temp = temp;
0001ef 91e0 0267 	LDS  R30,_temp
0001f1 93e0 0268 	STS  _t_temp,R30
                 ; 0000 015B       }
0001f3 cf98      	RJMP _0x1D
                 ; 0000 015C }
                 _0x31:
0001f4 cfff      	RJMP _0x31
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001f5 93aa      	ST   -Y,R26
0001f6 b3e5      	IN   R30,0x15
0001f7 70ef      	ANDI R30,LOW(0xF)
0001f8 2fae      	MOV  R26,R30
0001f9 81e8      	LD   R30,Y
0001fa 7fe0      	ANDI R30,LOW(0xF0)
0001fb 2bea      	OR   R30,R26
0001fc bbe5      	OUT  0x15,R30
                +
0001fd e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001fe 958a     +DEC R24
0001ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000200 9aaa      	SBI  0x15,2
                +
000201 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000202 958a     +DEC R24
000203 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000204 98aa      	CBI  0x15,2
                +
000205 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000206 958a     +DEC R24
000207 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000208 c074      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000209 93aa      	ST   -Y,R26
00020a 81a8      	LD   R26,Y
00020b dfe9      	RCALL __lcd_write_nibble_G100
00020c 81e8          ld    r30,y
00020d 95e2          swap  r30
00020e 83e8          st    y,r30
00020f 81a8      	LD   R26,Y
000210 dfe4      	RCALL __lcd_write_nibble_G100
                +
000211 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000212 958a     +DEC R24
000213 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000214 c068      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000215 93aa      	ST   -Y,R26
000216 81e8      	LD   R30,Y
000217 e0f0      	LDI  R31,0
000218 59e7      	SUBI R30,LOW(-__base_y_G100)
000219 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00021a 81e0      	LD   R30,Z
00021b 81a9      	LDD  R26,Y+1
00021c 0fae      	ADD  R26,R30
00021d dfeb      	RCALL __lcd_write_data
00021e 8059      	LDD  R5,Y+1
00021f 8048      	LDD  R4,Y+0
                 _0x2020002:
000220 9622      	ADIW R28,2
000221 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000222 e0a2      	LDI  R26,LOW(2)
000223 d08f      	RCALL SUBOPT_0x8
000224 e0ac      	LDI  R26,LOW(12)
000225 dfe3      	RCALL __lcd_write_data
000226 e0a1      	LDI  R26,LOW(1)
000227 d08b      	RCALL SUBOPT_0x8
000228 e0e0      	LDI  R30,LOW(0)
000229 2e4e      	MOV  R4,R30
00022a 2e5e      	MOV  R5,R30
00022b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00022c 93aa      	ST   -Y,R26
00022d 81a8      	LD   R26,Y
00022e 30aa      	CPI  R26,LOW(0xA)
00022f f011      	BREQ _0x2000005
000230 1457      	CP   R5,R7
000231 f048      	BRLO _0x2000004
                 _0x2000005:
000232 e0e0      	LDI  R30,LOW(0)
000233 93ea      	ST   -Y,R30
000234 9443      	INC  R4
000235 2da4      	MOV  R26,R4
000236 dfde      	RCALL _lcd_gotoxy
000237 81a8      	LD   R26,Y
000238 30aa      	CPI  R26,LOW(0xA)
000239 f409      	BRNE _0x2000007
00023a c042      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
00023b 9453      	INC  R5
00023c 9aa8      	SBI  0x15,0
00023d 81a8      	LD   R26,Y
00023e dfca      	RCALL __lcd_write_data
00023f 98a8      	CBI  0x15,0
000240 c03c      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000241 93ba      	ST   -Y,R27
000242 93aa      	ST   -Y,R26
000243 931a      	ST   -Y,R17
                 _0x200000B:
000244 81e9      	LDD  R30,Y+1
000245 81fa      	LDD  R31,Y+1+1
000246 9631      	ADIW R30,1
000247 83e9      	STD  Y+1,R30
000248 83fa      	STD  Y+1+1,R31
000249 9731      	SBIW R30,1
00024a 91e4      	LPM  R30,Z
00024b 2f1e      	MOV  R17,R30
00024c 30e0      	CPI  R30,0
00024d f019      	BREQ _0x200000D
00024e 2fa1      	MOV  R26,R17
00024f dfdc      	RCALL _lcd_putchar
000250 cff3      	RJMP _0x200000B
                 _0x200000D:
000251 8118      	LDD  R17,Y+0
000252 9623      	ADIW R28,3
000253 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000254 93aa      	ST   -Y,R26
000255 b3e4      	IN   R30,0x14
000256 6fe0      	ORI  R30,LOW(0xF0)
000257 bbe4      	OUT  0x14,R30
000258 9aa2      	SBI  0x14,2
000259 9aa0      	SBI  0x14,0
00025a 9aa1      	SBI  0x14,1
00025b 98aa      	CBI  0x15,2
00025c 98a8      	CBI  0x15,0
00025d 98a9      	CBI  0x15,1
00025e 8078      	LDD  R7,Y+0
00025f 81e8      	LD   R30,Y
000260 58e0      	SUBI R30,-LOW(128)
                +
000261 93e0 026b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000263 81e8      	LD   R30,Y
000264 54e0      	SUBI R30,-LOW(192)
                +
000265 93e0 026c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000267 e1a4      	LDI  R26,LOW(20)
000268 e0b0      	LDI  R27,0
000269 940e 02bf 	CALL _delay_ms
00026b d04c      	RCALL SUBOPT_0x9
00026c d04b      	RCALL SUBOPT_0x9
00026d d04a      	RCALL SUBOPT_0x9
00026e e2a0      	LDI  R26,LOW(32)
00026f df85      	RCALL __lcd_write_nibble_G100
                +
000270 ec88     +LDI R24 , LOW ( 200 )
000271 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000272 9701     +SBIW R24 , 1
000273 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000274 e2a8      	LDI  R26,LOW(40)
000275 df93      	RCALL __lcd_write_data
000276 e0a4      	LDI  R26,LOW(4)
000277 df91      	RCALL __lcd_write_data
000278 e8a5      	LDI  R26,LOW(133)
000279 df8f      	RCALL __lcd_write_data
00027a e0a6      	LDI  R26,LOW(6)
00027b df8d      	RCALL __lcd_write_data
00027c dfa5      	RCALL _lcd_clear
                 _0x2020001:
00027d 9621      	ADIW R28,1
00027e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _control:
000260           	.BYTE 0x1
                 _isBuzz1:
000261           	.BYTE 0x1
                 _isBuzz2:
000262           	.BYTE 0x1
                 _selectorT:
000263           	.BYTE 0x1
                 _selectorL:
000264           	.BYTE 0x1
                 _controlMenu:
000265           	.BYTE 0x1
                 _check:
000266           	.BYTE 0x1
                 _temp:
000267           	.BYTE 0x1
                 _t_temp:
000268           	.BYTE 0x1
                 __base_y_G100:
000269           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
00027f e0e0      	LDI  R30,LOW(0)
000280 93ea      	ST   -Y,R30
000281 e0a0      	LDI  R26,LOW(0)
000282 cf92      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1:
000283 dfbd      	RCALL _lcd_putsf
000284 e0e0      	LDI  R30,LOW(0)
000285 93ea      	ST   -Y,R30
000286 e0a1      	LDI  R26,LOW(1)
000287 cf8d      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000288 e7a3      	LDI  R26,LOW(115)
000289 e0b0      	LDI  R27,0
00028a 940e 02bf 	CALL _delay_ms
00028c 9a95      	SBI  0x12,5
00028d e0e1      	LDI  R30,LOW(1)
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00028f 93aa      	ST   -Y,R26
000290 93ea      	ST   -Y,R30
000291 b7ef      	IN   R30,SREG
000292 93ea      	ST   -Y,R30
000293 91e0 0260 	LDS  R30,_control
000295 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000296 9a95      	SBI  0x12,5
000297 e0aa      	LDI  R26,LOW(10)
000298 e0b0      	LDI  R27,0
000299 940e 02bf 	CALL _delay_ms
00029b 9895      	CBI  0x12,5
00029c e0e0      	LDI  R30,LOW(0)
00029d 93e0 0266 	STS  _check,R30
00029f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002a0 9722      	SBIW R28,2
0002a1 e0a0      	LDI  R26,LOW(0)
0002a2 940e 013c 	CALL _read_adc
0002a4 83e8      	ST   Y,R30
0002a5 83f9      	STD  Y+1,R31
0002a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002a7 e6a4      	LDI  R26,LOW(100)
0002a8 e0b0      	LDI  R27,0
0002a9 940c 02bf 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0002ab 98c1      	CBI  0x18,1
0002ac 98c0      	CBI  0x18,0
0002ad 9895      	CBI  0x12,5
0002ae 9896      	CBI  0x12,6
0002af e0e0      	LDI  R30,LOW(0)
0002b0 93e0 0265 	STS  _controlMenu,R30
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0002b3 df55      	RCALL __lcd_write_data
0002b4 e0a3      	LDI  R26,LOW(3)
0002b5 e0b0      	LDI  R27,0
0002b6 940c 02bf 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0002b8 e3a0      	LDI  R26,LOW(48)
0002b9 df3b      	RCALL __lcd_write_nibble_G100
                +
0002ba ec88     +LDI R24 , LOW ( 200 )
0002bb e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002bc 9701     +SBIW R24 , 1
0002bd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002be 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002bf 9610      	adiw r26,0
0002c0 f039      	breq __delay_ms1
                 __delay_ms0:
0002c1 95a8      	wdr
                +
0002c2 ed80     +LDI R24 , LOW ( 0x7D0 )
0002c3 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002c4 9701     +SBIW R24 , 1
0002c5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002c6 9711      	sbiw r26,1
0002c7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002c8 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  23 r25:   5 r26:  98 r27:  25 r28:   7 r29:   1 r30: 184 r31:  20 
x  :   3 y  :  51 z  :   9 
Registers used: 18 out of 35 (51.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  37 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  25 
cbi   :  22 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   5 cpi   :  27 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   2 jmp   :  25 ld    :  19 ldd   :  10 ldi   : 117 
lds   :  25 lpm   :   9 lsl   :   0 lsr   :   0 mov   :   6 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   5 out   :  49 pop   :   0 push  :   0 rcall :  37 ret   :  18 
reti  :   2 rjmp  :  25 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :  15 sbic  :   0 sbis  :   2 sbiw  :  10 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   3 sts   :  17 sub   :   0 subi  :   6 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 43 out of 116 (37.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000592   1352     74   1426   32768   4.4%
[.dseg] 0x000060 0x00026d      0     13     13    2048   0.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
