#include <mega32a.h>
#include <alcd.h>
#include <spi.h>
#include <delay.h>
#include <stdio.h>
#include <stdint.h>


#define RC522_CS_PORT PORTB
#define RC522_CS_DDR  DDRB
#define RC522_CS_PIN  PORTB4   // SDA/SS of RC522

/* ---- RC522 registers / commands ---- */
#define REG_Command      0x01
#define REG_FIFOData     0x09
#define REG_FIFOLevel    0x0A
#define REG_AutoTest     0x36
#define REG_Version      0x37

#define CMD_Idle         0x00
#define CMD_Mem          0x01
#define CMD_CalcCRC      0x03
#define CMD_SoftReset    0x0F

/* ---- CS helpers ---- */
static void cs_low(void)  { RC522_CS_PORT &= ~(1<<RC522_CS_PIN); }
static void cs_high(void) { RC522_CS_PORT |=  (1<<RC522_CS_PIN); }

/* ---- SPI xfer (SPI presumed configured by Wizard as Master, Mode0) ---- */
static uint8_t spi_txrx(uint8_t v){
    SPDR = v;
    while(!(SPSR & (1<<SPIF)));
    return SPDR;
}

/* ---- RC522 low-level R/W ---- */
static void rc522_write(uint8_t reg, uint8_t val){
    cs_low();
    spi_txrx((reg<<1) & 0x7E);
    spi_txrx(val);
    cs_high();
}

static uint8_t rc522_read(uint8_t reg){
    uint8_t v;
    cs_low();
    spi_txrx(((reg<<1) & 0x7E) | 0x80);
    v = spi_txrx(0x00);
    cs_high();
    return v;
}

static void rc522_fifo_read_bytes(uint8_t* d, uint8_t n){
    uint8_t i;
    for(i=0;i<n;i++) d[i] = rc522_read(REG_FIFOData);
}

static void rc522_soft_reset(void){
    rc522_write(REG_Command, CMD_SoftReset);
    delay_ms(50);
}

/* ---- SelfTest: returns 1=PASS, 0=FAIL; writes chip version to *ver_out ---- */
static uint8_t rc522_selftest(uint8_t* ver_out){
    static const uint8_t expect_v10[64]={
        0x00,0xC6,0x37,0xD5,0x32,0xB7,0x57,0x5C,
        0xC2,0xD8,0x7C,0x4D,0xD9,0x70,0xC7,0x73,
        0x10,0xE6,0xD2,0xAA,0x5E,0xA1,0x3E,0x5A,
        0x14,0xAF,0x30,0x61,0xC9,0x70,0xDB,0x2E,
        0x64,0x22,0x72,0xB5,0xBD,0x65,0xF4,0xEC,
        0x22,0xBC,0xD3,0x72,0x35,0xCD,0xAA,0x41,
        0x1F,0xA7,0xF3,0x53,0x14,0xDE,0x7E,0x02,
        0xD9,0x0F,0xB5,0x5E,0x25,0x1D,0x29,0x79
    };
    static const uint8_t expect_v20[64]={
        0x00,0xEB,0x66,0xBA,0x57,0xBF,0x23,0x95,
        0xD0,0xE3,0x0D,0x3D,0x27,0x89,0x5C,0xDE,
        0x9D,0x3B,0xA7,0x00,0x21,0x5B,0x89,0x82,
        0x51,0x3A,0xEB,0x02,0x0C,0xA5,0x00,0x49,
        0x7C,0x84,0x4D,0xB3,0xCC,0xD2,0x1B,0x81,
        0x5D,0x48,0x76,0xD5,0x71,0x61,0x21,0xA9,
        0x86,0x96,0x83,0x38,0xCF,0x9D,0x5B,0x6D,
        0xDC,0x15,0xBA,0x3E,0x7D,0x95,0x3B,0x2F
    };

    uint8_t ver, buf[64], fl, i;

    /* 1) Read version (for report) */
    ver = rc522_read(REG_Version);

    /* 2) Perform self-test sequence */
    rc522_soft_reset();
    rc522_write(REG_FIFOLevel, 0x80);      // Flush FIFO
    for(i=0;i<25;i++) rc522_write(REG_FIFOData, 0x00);
    rc522_write(REG_Command, CMD_Mem);
    rc522_write(REG_AutoTest, 0x09);       // Enable self-test
    rc522_write(REG_FIFOData, 0x00);
    rc522_write(REG_Command, CMD_CalcCRC); // Start test

    for(i=0;i<200;i++){
        fl = rc522_read(REG_FIFOLevel);
        if(fl == 64) break;
        delay_ms(1);
    }
    if(fl != 64){ *ver_out = ver; return 0; }

    rc522_fifo_read_bytes(buf, 64);
    rc522_write(REG_AutoTest, 0x00);
    rc522_soft_reset();

    *ver_out = ver;

    if(ver == 0x91){
        for(i=0;i<64;i++) if(buf[i] != expect_v10[i]) return 0;
        return 1;
    }else if(ver == 0x92){
        for(i=0;i<64;i++) if(buf[i] != expect_v20[i]) return 0;
        return 1;
    }else{
        return 0; // unknown version treated as FAIL
    }
}


void main(void)
{
// Declare your local variables here
char line[17];

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI Type: Master
// SPI Clock Rate: 125.000 kHz
// SPI Clock Phase: Cycle Start
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0);
SPSR=(0<<SPI2X);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTC Bit 0
// RD - PORTC Bit 1
// EN - PORTC Bit 2
// D4 - PORTC Bit 4
// D5 - PORTC Bit 5
// D6 - PORTC Bit 6
// D7 - PORTC Bit 7
// Characters/line: 16
lcd_init(16);

uint8_t ver = 0;
uint8_t ok  = 0;

/* Only ensure CS pin is output and idle-high.
   SPI itself (SPCR/SPSR) is assumed configured by CodeVision Wizard. */
RC522_CS_DDR  |= (1<<RC522_CS_PIN);
RC522_CS_PORT |= (1<<RC522_CS_PIN); // CS idle high

lcd_clear();
lcd_gotoxy(0,0); lcd_putsf("RC522 SelfTest");
lcd_gotoxy(0,1); lcd_putsf("Please wait...");
delay_ms(400);

ok = rc522_selftest(&ver);

lcd_clear();
sprintf(line,"Ver:0x%02X", ver);
lcd_gotoxy(0,0); lcd_puts(line);
lcd_gotoxy(0,1); lcd_putsf(ok ? "SelfTest: PASS" : "SelfTest: FAIL");

while(1);
}
