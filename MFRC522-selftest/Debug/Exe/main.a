;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <spi.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdint.h>
;
;
;#define RC522_CS_PORT PORTB
;#define RC522_CS_DDR  DDRB
;#define RC522_CS_PIN  PORTB4   // SDA/SS of RC522
;
;/* ---- RC522 registers / commands ---- */
;#define REG_Command      0x01
;#define REG_FIFOData     0x09
;#define REG_FIFOLevel    0x0A
;#define REG_AutoTest     0x36
;#define REG_Version      0x37
;
;#define CMD_Idle         0x00
;#define CMD_Mem          0x01
;#define CMD_CalcCRC      0x03
;#define CMD_SoftReset    0x0F
;
;/* ---- CS helpers ---- */
;static void cs_low(void)  { RC522_CS_PORT &= ~(1<<RC522_CS_PIN); }
; 0000 001A static void cs_low(void)  { PORTB &= ~(1<<4          ); }

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;static void cs_high(void) { RC522_CS_PORT |=  (1<<RC522_CS_PIN); }
; 0000 001B static void cs_high(void) { PORTB |=  (1<<4          ); }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;/* ---- SPI xfer (SPI presumed configured by Wizard as Master, Mode0) ---- */
;static uint8_t spi_txrx(uint8_t v){
; 0000 001E static uint8_t spi_txrx(uint8_t v){
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001F     SPDR = v;
;PCODE: $0000001B VOL: 0
;	v -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0020     while(!(SPSR & (1<<SPIF)));
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0021     return SPDR;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0022 }
;PCODE: $00000027 VOL: 0
;
;/* ---- RC522 low-level R/W ---- */
;static void rc522_write(uint8_t reg, uint8_t val){
; 0000 0025 static void rc522_write(uint8_t reg, uint8_t val){
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0026     cs_low();
;PCODE: $0000002A VOL: 0
;	reg -> Y+1
;	val -> Y+0
;PCODE: $0000002B VOL: 0
; 0000 0027     spi_txrx((reg<<1) & 0x7E);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0028     spi_txrx(val);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0029     cs_high();
;PCODE: $00000033 VOL: 0
; 0000 002A }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;static uint8_t rc522_read(uint8_t reg){
; 0000 002C static uint8_t rc522_read(uint8_t reg){
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002D     uint8_t v;
; 0000 002E     cs_low();
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;	reg -> Y+1
;	v -> R17
;PCODE: $0000003B VOL: 0
; 0000 002F     spi_txrx(((reg<<1) & 0x7E) | 0x80);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0030     v = spi_txrx(0x00);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0031     cs_high();
;PCODE: $00000045 VOL: 0
; 0000 0032     return v;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0033 }
;PCODE: $0000004B VOL: 0
;
;static void rc522_fifo_read_bytes(uint8_t* d, uint8_t n){
; 0000 0035 static void rc522_fifo_read_bytes(uint8_t* d, uint8_t n){
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0036     uint8_t i;
; 0000 0037     for(i=0;i<n;i++) d[i] = rc522_read(REG_FIFOData);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;	*d -> Y+2
;	n -> Y+1
;	i -> R17
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0038 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;static void rc522_soft_reset(void){
; 0000 003A static void rc522_soft_reset(void){
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003B     rc522_write(REG_Command, CMD_SoftReset);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003C     delay_ms(50);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 003D }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;/* ---- SelfTest: returns 1=PASS, 0=FAIL; writes chip version to *ver_out ---- */
;static uint8_t rc522_selftest(uint8_t* ver_out){
; 0000 0040 static uint8_t rc522_selftest(uint8_t* ver_out){
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0041     static const uint8_t expect_v10[64]={
; 0000 0042         0x00,0xC6,0x37,0xD5,0x32,0xB7,0x57,0x5C,
; 0000 0043         0xC2,0xD8,0x7C,0x4D,0xD9,0x70,0xC7,0x73,
; 0000 0044         0x10,0xE6,0xD2,0xAA,0x5E,0xA1,0x3E,0x5A,
; 0000 0045         0x14,0xAF,0x30,0x61,0xC9,0x70,0xDB,0x2E,
; 0000 0046         0x64,0x22,0x72,0xB5,0xBD,0x65,0xF4,0xEC,
; 0000 0047         0x22,0xBC,0xD3,0x72,0x35,0xCD,0xAA,0x41,
; 0000 0048         0x1F,0xA7,0xF3,0x53,0x14,0xDE,0x7E,0x02,
; 0000 0049         0xD9,0x0F,0xB5,0x5E,0x25,0x1D,0x29,0x79
; 0000 004A     };

	.DSEG

	.CSEG
; 0000 004B     static const uint8_t expect_v20[64]={
; 0000 004C         0x00,0xEB,0x66,0xBA,0x57,0xBF,0x23,0x95,
; 0000 004D         0xD0,0xE3,0x0D,0x3D,0x27,0x89,0x5C,0xDE,
; 0000 004E         0x9D,0x3B,0xA7,0x00,0x21,0x5B,0x89,0x82,
; 0000 004F         0x51,0x3A,0xEB,0x02,0x0C,0xA5,0x00,0x49,
; 0000 0050         0x7C,0x84,0x4D,0xB3,0xCC,0xD2,0x1B,0x81,
; 0000 0051         0x5D,0x48,0x76,0xD5,0x71,0x61,0x21,0xA9,
; 0000 0052         0x86,0x96,0x83,0x38,0xCF,0x9D,0x5B,0x6D,
; 0000 0053         0xDC,0x15,0xBA,0x3E,0x7D,0x95,0x3B,0x2F
; 0000 0054     };

	.DSEG

	.CSEG
; 0000 0055 
; 0000 0056     uint8_t ver, buf[64], fl, i;
; 0000 0057 
; 0000 0058     /* 1) Read version (for report) */
; 0000 0059     ver = rc522_read(REG_Version);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;	*ver_out -> Y+68
;	ver -> R17
;	buf -> Y+4
;	fl -> R16
;	i -> R19
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 005A 
; 0000 005B     /* 2) Perform self-test sequence */
; 0000 005C     rc522_soft_reset();
;PCODE: $0000007F VOL: 0
; 0000 005D     rc522_write(REG_FIFOLevel, 0x80);      // Flush FIFO
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 005E     for(i=0;i<25;i++) rc522_write(REG_FIFOData, 0x00);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 005F rc522_write(0x01, 0x01);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0060     rc522_write(REG_AutoTest, 0x09);       // Enable self-test
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0061     rc522_write(REG_FIFOData, 0x00);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0062     rc522_write(REG_Command, CMD_CalcCRC); // Start test
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0063 
; 0000 0064     for(i=0;i<200;i++){
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0065         fl = rc522_read(REG_FIFOLevel);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0066         if(fl == 64) break;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0067         delay_ms(1);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0068     }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0069     if(fl != 64){ *ver_out = ver; return 0; }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 006A 
; 0000 006B     rc522_fifo_read_bytes(buf, 64);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 006C     rc522_write(REG_AutoTest, 0x00);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 006D     rc522_soft_reset();
;PCODE: $000000D1 VOL: 0
; 0000 006E 
; 0000 006F     *ver_out = ver;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0070 
; 0000 0071     if(ver == 0x91){
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0072         for(i=0;i<64;i++) if(buf[i] != expect_v10[i]) return 0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0073         return 1;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0074     }else if(ver == 0x92){
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0075         for(i=0;i<64;i++) if(buf[i] != expect_v20[i]) return 0;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0076         return 1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0077     }else{
;PCODE: $0000011F VOL: 0
; 0000 0078         return 0; // unknown version treated as FAIL
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0079     }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 007A }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;
;
;void main(void)
; 0000 007E {
;PCODE: $0000012A VOL: 0
; 0000 007F // Declare your local variables here
; 0000 0080 char line[17];
; 0000 0081 
; 0000 0082 
; 0000 0083 uint8_t ver = 0;
; 0000 0084 uint8_t ok  = 0;
; 0000 0085 // Input/Output Ports initialization
; 0000 0086 // Port A initialization
; 0000 0087 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0088 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000012B VOL: 0
;	line -> Y+0
;	ver -> R17
;	ok -> R16
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0089 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 008A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 008B 
; 0000 008C // Port B initialization
; 0000 008D // Function: Bit7=Out Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 008E DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 008F // State: Bit7=0 Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0090 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0091 
; 0000 0092 // Port C initialization
; 0000 0093 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0094 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0095 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0096 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0097 
; 0000 0098 // Port D initialization
; 0000 0099 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 009A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 009B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 009C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 009D 
; 0000 009E // Timer/Counter 0 initialization
; 0000 009F // Clock source: System Clock
; 0000 00A0 // Clock value: Timer 0 Stopped
; 0000 00A1 // Mode: Normal top=0xFF
; 0000 00A2 // OC0 output: Disconnected
; 0000 00A3 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00A4 TCNT0=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00A5 OCR0=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer/Counter 1 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: Timer1 Stopped
; 0000 00AA // Mode: Normal top=0xFFFF
; 0000 00AB // OC1A output: Disconnected
; 0000 00AC // OC1B output: Disconnected
; 0000 00AD // Noise Canceler: Off
; 0000 00AE // Input Capture on Falling Edge
; 0000 00AF // Timer1 Overflow Interrupt: Off
; 0000 00B0 // Input Capture Interrupt: Off
; 0000 00B1 // Compare A Match Interrupt: Off
; 0000 00B2 // Compare B Match Interrupt: Off
; 0000 00B3 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00B4 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00B5 TCNT1H=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00B6 TCNT1L=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00B7 ICR1H=0x00;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00B8 ICR1L=0x00;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00B9 OCR1AH=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00BA OCR1AL=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00BB OCR1BH=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00BC OCR1BL=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00BD 
; 0000 00BE // Timer/Counter 2 initialization
; 0000 00BF // Clock source: System Clock
; 0000 00C0 // Clock value: Timer2 Stopped
; 0000 00C1 // Mode: Normal top=0xFF
; 0000 00C2 // OC2 output: Disconnected
; 0000 00C3 ASSR=0<<AS2;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00C4 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00C5 TCNT2=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00C6 OCR2=0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00C7 
; 0000 00C8 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C9 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00CA 
; 0000 00CB // External Interrupt(s) initialization
; 0000 00CC // INT0: Off
; 0000 00CD // INT1: Off
; 0000 00CE // INT2: Off
; 0000 00CF MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00D0 MCUCSR=(0<<ISC2);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00D1 
; 0000 00D2 // USART initialization
; 0000 00D3 // USART disabled
; 0000 00D4 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00D5 
; 0000 00D6 // Analog Comparator initialization
; 0000 00D7 // Analog Comparator: Off
; 0000 00D8 // The Analog Comparator's positive input is
; 0000 00D9 // connected to the AIN0 pin
; 0000 00DA // The Analog Comparator's negative input is
; 0000 00DB // connected to the AIN1 pin
; 0000 00DC ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00DD SFIOR=(0<<ACME);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00DE 
; 0000 00DF // ADC initialization
; 0000 00E0 // ADC disabled
; 0000 00E1 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00E2 
; 0000 00E3 // SPI initialization
; 0000 00E4 // SPI Type: Master
; 0000 00E5 // SPI Clock Rate: 125.000 kHz
; 0000 00E6 // SPI Clock Phase: Cycle Start
; 0000 00E7 // SPI Clock Polarity: Low
; 0000 00E8 // SPI Data Order: MSB First
; 0000 00E9 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00EA SPSR=(0<<SPI2X);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00EB 
; 0000 00EC // TWI initialization
; 0000 00ED // TWI disabled
; 0000 00EE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00EF 
; 0000 00F0 // Alphanumeric LCD initialization
; 0000 00F1 // Connections are specified in the
; 0000 00F2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00F3 // RS - PORTC Bit 0
; 0000 00F4 // RD - PORTC Bit 1
; 0000 00F5 // EN - PORTC Bit 2
; 0000 00F6 // D4 - PORTC Bit 4
; 0000 00F7 // D5 - PORTC Bit 5
; 0000 00F8 // D6 - PORTC Bit 6
; 0000 00F9 // D7 - PORTC Bit 7
; 0000 00FA // Characters/line: 16
; 0000 00FB lcd_init(16);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00FC 
; 0000 00FD 
; 0000 00FE /* Only ensure CS pin is output and idle-high.
; 0000 00FF    SPI itself (SPCR/SPSR) is assumed configured by CodeVision Wizard. */
; 0000 0100 RC522_CS_DDR  |= (1<<RC522_CS_PIN);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0101 RC522_CS_PORT |= (1<<RC522_CS_PIN); // CS idle high
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0102 
; 0000 0103 lcd_clear();
;PCODE: $0000017C VOL: 0
; 0000 0104 lcd_gotoxy(0,0); lcd_putsf("RC522 SelfTest");
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0105 lcd_gotoxy(0,1); lcd_putsf("Please wait...");
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0106 delay_ms(400);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0107 
; 0000 0108 ok = rc522_selftest(&ver);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0109 
; 0000 010A lcd_clear();
;PCODE: $00000192 VOL: 0
; 0000 010B sprintf(line,"Ver:0x%02X", ver);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 010C lcd_gotoxy(0,0); lcd_puts(line);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 010D lcd_gotoxy(0,1); lcd_putsf(ok ? "SelfTest: PASS" : "SelfTest: FAIL");
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 010E 
; 0000 010F while(1);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0110 }
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
